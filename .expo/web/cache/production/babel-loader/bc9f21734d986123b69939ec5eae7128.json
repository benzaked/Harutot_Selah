{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _inherits from\"@babel/runtime/helpers/inherits\";import React,{Component}from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Text from\"react-native-web/dist/exports/Text\";import View from\"react-native-web/dist/exports/View\";import TextInput from\"react-native-web/dist/exports/TextInput\";import Button from\"react-native-web/dist/exports/Button\";import Expo from\"expo\";import firebase from'firebase';import*as Google from'expo-google-app-auth';import MenuDrawer from\"../components/MenuDrawer\";import{firebaseConfig}from\"../config\";import global from\"../components/global\";import DrawerNavigator from\"../navigation/DrawerNavigator\";var LoginScreen=function(_Component){_inherits(LoginScreen,_Component);function LoginScreen(props){var _this;_classCallCheck(this,LoginScreen);console.ignoredYellowBox=['Setting a timer'];_this=_possibleConstructorReturn(this,_getPrototypeOf(LoginScreen).call(this,props));_this.isUserEqual=function(userID,firebaseUser){console.log(\"in is new user?\");if(firebaseUser){console.log(userID);var providerData=firebaseUser.providerData;for(var i=0;i<providerData.length;i++){if(providerData[i].providerId===firebase.auth.GoogleAuthProvider.PROVIDER_ID&&providerData[i].uid===userID){return true;}}}console.log(\"not new user\");return false;};_this.onSignIn=function(googleUser,userID){var unsubscribe=firebase.auth().onAuthStateChanged(function(firebaseUser){unsubscribe();if(!this.isUserEqual(userID,firebaseUser)){var credential=firebase.auth.GoogleAuthProvider.credential(googleUser.idToken,googleUser.accessToken);console.log('sdasdasdsadsadas');firebase.auth().signInWithCredential(credential).then(function(result){console.log('user signed in');if(result.additionalUserInfo.isNewUser){firebase.database().ref('/users/'+result.user.uid).set({gmail:result.user.email,profile_picture:result.additionalUserInfo.profile.picture,locale:result.additionalUserInfo.profile.locale,first_name:result.additionalUserInfo.profile.given_name,last_name:result.additionalUserInfo.profile.family_name,created_at:Date.now()}).then(function(snapshot){});}else{firebase.database().ref('/users/'+result.user.uid).update({last_logged_in:Date.now()});}}).catch(function(error){var errorCode=error.code;var errorMessage=error.message;var email=error.email;var credential=error.credential;});}else{console.log('User already signed-in Firebase.');}}.bind(_assertThisInitialized(_this)));};_this.signInWithGoogleAsync=function _callee(){var result;return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return _regeneratorRuntime.awrap(Google.logInAsync({behavior:'web',androidClientId:\"1003696475172-je842d8md4rpd2ds28ld3mja5nppj5km.apps.googleusercontent.com\",scopes:['profile','email'],androidStandaloneAppClientId:\"1003696475172-njkm3g37r9fqgcugnfqqshif23edd33p.apps.googleusercontent.com\"}));case 3:result=_context.sent;if(!(result.type==='success')){_context.next=16;break;}console.log('the user id is ::::::::::::;'+result.user.id);_this.onSignIn(result,result.user.id);global.userName=result.user.name;global.photoUrl=result.user.photoUrl;global.userId=result.user.id;console.log('the user id is ::::::::::::;'+global.userId);_this.setState({signedIn:true,name:result.user.name,photoUrl:result.user.photoUrl,userID:result.user.id});console.log('the name is ',_this.state.name);return _context.abrupt(\"return\",result.accessToken);case 16:return _context.abrupt(\"return\",{cancelled:true});case 17:_context.next=22;break;case 19:_context.prev=19;_context.t0=_context[\"catch\"](0);return _context.abrupt(\"return\",{error:true});case 22:case\"end\":return _context.stop();}}},null,null,[[0,19]]);};_this.state={signedIn:false,name:\"\",photoUrl:\"\",userID:\"\"};if(!firebase.apps.length){firebase.initializeApp(firebaseConfig);}return _this;}_createClass(LoginScreen,[{key:\"render\",value:function render(){var _this2=this;return React.createElement(View,{style:styles.container},this.state.signedIn?this.props.navigation.navigate('Home'):React.createElement(Button,{title:\"Sign In With Google\",onPress:function onPress(){return _this2.signInWithGoogleAsync();}}));}}]);return LoginScreen;}(Component);export{LoginScreen as default};var styles=StyleSheet.create({container:{flex:1,alignContent:'center',justifyContent:'center'}});","map":{"version":3,"sources":["C:/final project/react native/finalProject-master/screens/LoginScreen.js"],"names":["React","Component","Expo","firebase","Google","MenuDrawer","firebaseConfig","global","DrawerNavigator","LoginScreen","props","console","ignoredYellowBox","isUserEqual","userID","firebaseUser","log","providerData","i","length","providerId","auth","GoogleAuthProvider","PROVIDER_ID","uid","onSignIn","googleUser","unsubscribe","onAuthStateChanged","credential","idToken","accessToken","signInWithCredential","then","result","additionalUserInfo","isNewUser","database","ref","user","set","gmail","email","profile_picture","profile","picture","locale","first_name","given_name","last_name","family_name","created_at","Date","now","snapshot","update","last_logged_in","catch","error","errorCode","code","errorMessage","message","bind","signInWithGoogleAsync","logInAsync","behavior","androidClientId","scopes","androidStandaloneAppClientId","type","id","userName","name","photoUrl","userId","setState","signedIn","state","cancelled","apps","initializeApp","styles","container","navigation","navigate","StyleSheet","create","flex","alignContent","justifyContent"],"mappings":"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","sourcesContent":["import React ,  {Component} from 'react';\nimport { StyleSheet, Text, View,TextInput,Button } from 'react-native';\nimport Expo from \"expo\"\nimport firebase from 'firebase'\nimport * as Google from 'expo-google-app-auth';\nimport MenuDrawer from '../components/MenuDrawer'\nimport {firebaseConfig} from '../config'\nimport global from '../components/global'\nimport DrawerNavigator from '../navigation/DrawerNavigator'\n\n\nexport default class LoginScreen extends Component {\n    constructor(props){\n      console.ignoredYellowBox = [\n        'Setting a timer'\n    ]\n      super(props);\n      this.state = {\n        signedIn: false,\n        name:\"\",\n        photoUrl:\"\",\n        userID:\"\"\n\n      }\n      if (!firebase.apps.length) {firebase.initializeApp(firebaseConfig); }\n    }\n  isUserEqual = (userID, firebaseUser) => {\n    console.log(\"in is new user?\");\n    if (firebaseUser) {\n      console.log(userID);\n      var providerData = firebaseUser.providerData;\n      for (var i = 0; i < providerData.length; i++) {\n        if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID &&\n            providerData[i].uid === userID) {\n          // We don't need to reauth the Firebase connection.\n          return true;\n        }\n      }\n    }\n    console.log(\"not new user\")\n    return false;\n  }\n  onSignIn = (googleUser,userID) => {\n    // console.log('Google Auth Response', googleUser);\n\n    // We need to register an Observer on Firebase Auth to make sure auth is initialized.\n    var unsubscribe = firebase.auth().onAuthStateChanged(function(firebaseUser) {\n      unsubscribe();\n      // console.log('########################################################################################################################');\n      \n      // Check if we are already signed-in Firebase with the correct user.\n      if (!this.isUserEqual(userID, firebaseUser)) {\n        // Build Firebase credential with the Google ID token.\n        var credential = firebase.auth.GoogleAuthProvider.credential(\n          googleUser.idToken,\n          googleUser.accessToken\n        );\n        // Sign in with credential from the Google user.\n        console.log('sdasdasdsadsadas');\n        firebase.auth().signInWithCredential(credential).then(function(result) {\n          console.log('user signed in');\n          if(result.additionalUserInfo.isNewUser){ \n            firebase.database().ref('/users/' + result.user.uid).set({\n              gmail: result.user.email,\n              profile_picture: result.additionalUserInfo.profile.picture,\n              locale: result.additionalUserInfo.profile.locale,\n              first_name: result.additionalUserInfo.profile.given_name,\n              last_name: result.additionalUserInfo.profile.family_name,\n              created_at: Date.now()\n            }).then(function (snapshot){\n              // console.log('Snapshot', snapshot);\n            });\n          }else{\n            firebase.database().ref('/users/' + result.user.uid).update({\n              last_logged_in: Date.now()\n            });\n          }\n        }).catch(function(error) {\n          // Handle Errors here.\n          var errorCode = error.code;\n          var errorMessage = error.message;\n          // The email of the user's account used.\n          var email = error.email;\n          // The firebase.auth.AuthCredential type that was used.\n          var credential = error.credential;\n          // ...\n        });\n      } else {\n        console.log('User already signed-in Firebase.');\n      }\n      \n    }.bind(this));\n  };\n      c\n      signInWithGoogleAsync = async ()  => {\n        try {\n          const result = await Google.logInAsync({\n            behavior: 'web',\n            androidClientId:\"1003696475172-je842d8md4rpd2ds28ld3mja5nppj5km.apps.googleusercontent.com\",\n            scopes: ['profile', 'email'],\n            androidStandaloneAppClientId:\"1003696475172-njkm3g37r9fqgcugnfqqshif23edd33p.apps.googleusercontent.com\"\n          });\n         \n          // });\n      \n          if (result.type === 'success') {\n            console.log('the user id is ::::::::::::;' + result.user.id);\n            this.onSignIn(result,result.user.id);\n            global.userName = result.user.name\n            global.photoUrl = result.user.photoUrl\n            global.userId = result.user.id\n            console.log('the user id is ::::::::::::;' + global.userId);\n            this.setState({\n              signedIn: true,\n              name: result.user.name,\n              photoUrl: result.user.photoUrl,\n              userID: result.user.id\n            });\n            console.log('the name is ',this.state.name)\n\n            return result.accessToken;\n          } else {\n            return { cancelled: true };\n          }\n        } catch (e) {\n          return { error: true };\n        }\n      }\n      render() {\n        return (\n          <View style={styles.container}>\n          \n        {this.state.signedIn ? (\n        this.props.navigation.navigate('Home')\n            \n          \n          //  <LoggedInPage name ={this.state.name} photoUrl={this.state.photoUrl} userID={this.state.userID} pageNo={1} />\n        ) : (\n          <Button title={\"Sign In With Google\"}\n                 onPress={() =>this.signInWithGoogleAsync()}\n                />\n            \n                \n            \n        )} \n        </View>\n        )}\n}\n\n\nconst styles = StyleSheet.create({\n    container:{\n        flex:1,\n        alignContent:'center',\n        justifyContent:'center'\n\n    }\n})"]},"metadata":{},"sourceType":"module"}
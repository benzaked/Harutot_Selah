{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _inherits from\"@babel/runtime/helpers/inherits\";function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{NavigationActions}from'react-navigation';var DrawerSidebar=function(_React$PureComponent){_inherits(DrawerSidebar,_React$PureComponent);function DrawerSidebar(){var _getPrototypeOf2;var _this;_classCallCheck(this,DrawerSidebar);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(DrawerSidebar)).call.apply(_getPrototypeOf2,[this].concat(args)));_defineProperty(_assertThisInitialized(_this),\"getScreenOptions\",function(routeKey){var descriptor=_this.props.descriptors[routeKey];if(!descriptor.options){throw new Error('Cannot access screen descriptor options from drawer sidebar');}return descriptor.options;});_defineProperty(_assertThisInitialized(_this),\"getLabel\",function(_ref){var focused=_ref.focused,tintColor=_ref.tintColor,route=_ref.route;var _this$getScreenOption=_this.getScreenOptions(route.key),drawerLabel=_this$getScreenOption.drawerLabel,title=_this$getScreenOption.title;if(drawerLabel){return typeof drawerLabel==='function'?drawerLabel({tintColor:tintColor,focused:focused}):drawerLabel;}if(typeof title==='string'){return title;}return route.routeName;});_defineProperty(_assertThisInitialized(_this),\"renderIcon\",function(_ref2){var focused=_ref2.focused,tintColor=_ref2.tintColor,route=_ref2.route;var _this$getScreenOption2=_this.getScreenOptions(route.key),drawerIcon=_this$getScreenOption2.drawerIcon;if(drawerIcon){return typeof drawerIcon==='function'?drawerIcon({tintColor:tintColor,focused:focused}):drawerIcon;}return null;});_defineProperty(_assertThisInitialized(_this),\"handleItemPress\",function(_ref3){var route=_ref3.route,focused=_ref3.focused;if(focused){_this.props.navigation.closeDrawer();}else{_this.props.navigation.dispatch(NavigationActions.navigate({routeName:route.routeName}));}});return _this;}_createClass(DrawerSidebar,[{key:\"render\",value:function render(){var ContentComponent=this.props.contentComponent;if(!ContentComponent){return null;}var state=this.props.navigation.state;if(typeof state.index!=='number'){throw new Error('The index of the route should be state in the navigation state');}return React.createElement(View,{style:[styles.container,this.props.style]},React.createElement(ContentComponent,_extends({},this.props.contentOptions,{navigation:this.props.navigation,descriptors:this.props.descriptors,drawerOpenProgress:this.props.drawerOpenProgress,items:state.routes,activeItemKey:state.routes[state.index]?state.routes[state.index].key:null,screenProps:this.props.screenProps,getLabel:this.getLabel,renderIcon:this.renderIcon,onItemPress:this.handleItemPress,drawerPosition:this.props.drawerPosition})));}}]);return DrawerSidebar;}(React.PureComponent);export default DrawerSidebar;var styles=StyleSheet.create({container:{flex:1}});","map":{"version":3,"sources":["DrawerSidebar.tsx"],"names":["React","routeKey","descriptor","route","title","drawerLabel","tintColor","focused","drawerIcon","routeName","ContentComponent","state","styles","drawerPosition","container","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, ViewStyle } from 'react-native';\nimport {\n  NavigationActions,\n  NavigationRoute,\n  NavigationScreenProp,\n} from 'react-navigation';\nimport Animated from 'react-native-reanimated';\nimport {\n  Scene,\n  NavigationDrawerState,\n  DrawerContentComponentProps,\n  SceneDescriptorMap,\n} from '../types';\n\ntype Props = {\n  contentComponent?: React.ComponentType<DrawerContentComponentProps>;\n  contentOptions?: object;\n  screenProps?: unknown;\n  navigation: NavigationScreenProp<NavigationDrawerState>;\n  descriptors: SceneDescriptorMap;\n  drawerOpenProgress: Animated.Node<number>;\n  drawerPosition: 'left' | 'right';\n  style?: ViewStyle;\n};\n\n/**\n * Component that renders the sidebar screen of the drawer.\n */\nclass DrawerSidebar extends React.PureComponent<Props> {\n  private getScreenOptions = (routeKey: string) => {\n    const descriptor = this.props.descriptors[routeKey];\n\n    if (!descriptor.options) {\n      throw new Error(\n        'Cannot access screen descriptor options from drawer sidebar'\n      );\n    }\n\n    return descriptor.options;\n  };\n\n  private getLabel = ({ focused, tintColor, route }: Scene) => {\n    const { drawerLabel, title } = this.getScreenOptions(route.key);\n    if (drawerLabel) {\n      return typeof drawerLabel === 'function'\n        ? drawerLabel({ tintColor, focused })\n        : drawerLabel;\n    }\n\n    if (typeof title === 'string') {\n      return title;\n    }\n\n    return route.routeName;\n  };\n\n  private renderIcon = ({ focused, tintColor, route }: Scene) => {\n    const { drawerIcon } = this.getScreenOptions(route.key);\n    if (drawerIcon) {\n      return typeof drawerIcon === 'function'\n        ? drawerIcon({ tintColor, focused })\n        : drawerIcon;\n    }\n    return null;\n  };\n\n  private handleItemPress = ({\n    route,\n    focused,\n  }: {\n    route: NavigationRoute;\n    focused: boolean;\n  }) => {\n    if (focused) {\n      // @ts-ignore\n      this.props.navigation.closeDrawer();\n    } else {\n      this.props.navigation.dispatch(\n        NavigationActions.navigate({ routeName: route.routeName })\n      );\n    }\n  };\n\n  render() {\n    const ContentComponent = this.props.contentComponent;\n\n    if (!ContentComponent) {\n      return null;\n    }\n\n    const { state } = this.props.navigation;\n\n    if (typeof state.index !== 'number') {\n      throw new Error(\n        'The index of the route should be state in the navigation state'\n      );\n    }\n\n    return (\n      <View style={[styles.container, this.props.style]}>\n        <ContentComponent\n          {...this.props.contentOptions}\n          navigation={this.props.navigation}\n          descriptors={this.props.descriptors}\n          drawerOpenProgress={this.props.drawerOpenProgress}\n          items={state.routes}\n          activeItemKey={\n            state.routes[state.index] ? state.routes[state.index].key : null\n          }\n          screenProps={this.props.screenProps}\n          getLabel={this.getLabel}\n          renderIcon={this.renderIcon}\n          onItemPress={this.handleItemPress}\n          drawerPosition={this.props.drawerPosition}\n        />\n      </View>\n    );\n  }\n}\n\nexport default DrawerSidebar;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
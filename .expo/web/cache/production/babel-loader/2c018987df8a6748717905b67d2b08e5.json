{"ast":null,"code":"import _defineProperty2 from\"@babel/runtime/helpers/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _inherits from\"@babel/runtime/helpers/inherits\";function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import View from\"react-native-web/dist/exports/View\";import Text from\"react-native-web/dist/exports/Text\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import{SafeAreaView,ThemeContext}from'react-navigation';import TouchableItem from\"./TouchableItem\";var DrawerNavigatorItems=function(_React$Component){_inherits(DrawerNavigatorItems,_React$Component);function DrawerNavigatorItems(){var _getPrototypeOf2;var _this;_classCallCheck(this,DrawerNavigatorItems);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(DrawerNavigatorItems)).call.apply(_getPrototypeOf2,[this].concat(args)));_defineProperty(_assertThisInitialized(_this),\"context\",void 0);return _this;}_createClass(DrawerNavigatorItems,[{key:\"getActiveTintColor\",value:function getActiveTintColor(){var activeTintColor=this.props.activeTintColor;if(!activeTintColor){return;}else if(typeof activeTintColor==='string'){return activeTintColor;}return activeTintColor[this.context];}},{key:\"getInactiveTintColor\",value:function getInactiveTintColor(){var inactiveTintColor=this.props.inactiveTintColor;if(!inactiveTintColor){return;}else if(typeof inactiveTintColor==='string'){return inactiveTintColor;}return inactiveTintColor[this.context];}},{key:\"getActiveBackgroundColor\",value:function getActiveBackgroundColor(){var activeBackgroundColor=this.props.activeBackgroundColor;if(!activeBackgroundColor){return;}else if(typeof activeBackgroundColor==='string'){return activeBackgroundColor;}return activeBackgroundColor[this.context];}},{key:\"getInactiveBackgroundColor\",value:function getInactiveBackgroundColor(){var inactiveBackgroundColor=this.props.inactiveBackgroundColor;if(!inactiveBackgroundColor){return;}else if(typeof inactiveBackgroundColor==='string'){return inactiveBackgroundColor;}return inactiveBackgroundColor[this.context];}},{key:\"render\",value:function render(){var _this$props=this.props,items=_this$props.items,activeItemKey=_this$props.activeItemKey,getLabel=_this$props.getLabel,renderIcon=_this$props.renderIcon,onItemPress=_this$props.onItemPress,itemsContainerStyle=_this$props.itemsContainerStyle,itemStyle=_this$props.itemStyle,labelStyle=_this$props.labelStyle,activeLabelStyle=_this$props.activeLabelStyle,inactiveLabelStyle=_this$props.inactiveLabelStyle,iconContainerStyle=_this$props.iconContainerStyle,drawerPosition=_this$props.drawerPosition;var activeTintColor=this.getActiveTintColor();var activeBackgroundColor=this.getActiveBackgroundColor();var inactiveTintColor=this.getInactiveTintColor();var inactiveBackgroundColor=this.getInactiveBackgroundColor();return React.createElement(View,{style:[styles.container,itemsContainerStyle]},items.map(function(route,index){var _forceInset;var focused=activeItemKey===route.key;var color=focused?activeTintColor:inactiveTintColor;var backgroundColor=focused?activeBackgroundColor:inactiveBackgroundColor;var scene={route:route,index:index,focused:focused,tintColor:color};var icon=renderIcon(scene);var label=getLabel(scene);var accessibilityLabel=typeof label==='string'?label:undefined;var extraLabelStyle=focused?activeLabelStyle:inactiveLabelStyle;return React.createElement(TouchableItem,{key:route.key,accessible:true,accessibilityLabel:accessibilityLabel,onPress:function onPress(){onItemPress({route:route,focused:focused});},delayPressIn:0},React.createElement(SafeAreaView,{style:[{backgroundColor:backgroundColor},styles.item,itemStyle],forceInset:(_forceInset={},_defineProperty2(_forceInset,drawerPosition,'always'),_defineProperty2(_forceInset,drawerPosition==='left'?'right':'left','never'),_defineProperty2(_forceInset,\"vertical\",'never'),_forceInset)},icon?React.createElement(View,{style:[styles.icon,focused?null:styles.inactiveIcon,iconContainerStyle]},icon):null,typeof label==='string'?React.createElement(Text,{style:[styles.label,{color:color},labelStyle,extraLabelStyle]},label):label));}));}}]);return DrawerNavigatorItems;}(React.Component);export{DrawerNavigatorItems as default};_defineProperty(DrawerNavigatorItems,\"defaultProps\",{activeTintColor:{light:'#2196f3',dark:'#fff'},activeBackgroundColor:{light:'rgba(0, 0, 0, .04)',dark:'rgba(255, 255, 255, .04)'},inactiveTintColor:{light:'rgba(0, 0, 0, .87)',dark:'rgba(255, 255, 255, .87)'},inactiveBackgroundColor:{light:'transparent',dark:'transparent'}});_defineProperty(DrawerNavigatorItems,\"contextType\",ThemeContext);var styles=StyleSheet.create({container:{paddingVertical:4},item:{flexDirection:'row',alignItems:'center'},icon:{marginHorizontal:16,width:24,alignItems:'center'},inactiveIcon:{opacity:0.62},label:{margin:16,fontWeight:'bold'}});","map":{"version":3,"sources":["DrawerNavigatorItems.tsx"],"names":["DrawerNavigatorItems","React","activeTintColor","light","dark","activeBackgroundColor","inactiveTintColor","inactiveBackgroundColor","ThemeContext","drawerPosition","styles","focused","activeItemKey","route","color","backgroundColor","scene","index","tintColor","icon","renderIcon","label","getLabel","accessibilityLabel","extraLabelStyle","onItemPress","container","paddingVertical","item","flexDirection","alignItems","marginHorizontal","width","inactiveIcon","opacity","margin","fontWeight"],"mappings":"8pBAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,2KAEA,OAAA,YAAA,CAAA,YAAA,KAAA,kBAAA,CACA,MAAA,CAAA,aAAA,uB,GAMe,CAAA,oB,6EAEb,+BAAA,yGAAA,IAAA,0CAAA,IAAA,wBAAA,yIAAA,IAAA,IAAA,eAAA,+BAAA,SAAA,CAAA,IAAA,EAAA,CAAA,CAAA,aAAA,C,gGAwB6B,IACrBE,CAAAA,eADqB,CACD,KAA1B,KAD2B,CACrBA,eADqB,CAE3B,GAAI,CAAJ,eAAA,CAAsB,CACpB,OADF,CAAA,IAEO,IAAI,MAAA,CAAA,eAAA,GAAJ,QAAA,CAAyC,CAC9C,MAAA,CAAA,eAAA,CACD,CAED,MAAOA,CAAAA,eAAe,CAAC,KAAvB,OAAsB,CAAtB,CACD,C,mEAE8B,IACvBI,CAAAA,iBADuB,CACD,KAA5B,KAD6B,CACvBA,iBADuB,CAE7B,GAAI,CAAJ,iBAAA,CAAwB,CACtB,OADF,CAAA,IAEO,IAAI,MAAA,CAAA,iBAAA,GAAJ,QAAA,CAA2C,CAChD,MAAA,CAAA,iBAAA,CACD,CAED,MAAOA,CAAAA,iBAAiB,CAAC,KAAzB,OAAwB,CAAxB,CACD,C,2EAEkC,IAC3BD,CAAAA,qBAD2B,CACD,KAAhC,KADiC,CAC3BA,qBAD2B,CAEjC,GAAI,CAAJ,qBAAA,CAA4B,CAC1B,OADF,CAAA,IAEO,IAAI,MAAA,CAAA,qBAAA,GAAJ,QAAA,CAA+C,CACpD,MAAA,CAAA,qBAAA,CACD,CAED,MAAOA,CAAAA,qBAAqB,CAAC,KAA7B,OAA4B,CAA5B,CACD,C,+EAEoC,IAC7BE,CAAAA,uBAD6B,CACD,KAAlC,KADmC,CAC7BA,uBAD6B,CAEnC,GAAI,CAAJ,uBAAA,CAA8B,CAC5B,OADF,CAAA,IAEO,IAAI,MAAA,CAAA,uBAAA,GAAJ,QAAA,CAAiD,CACtD,MAAA,CAAA,uBAAA,CACD,CAED,MAAOA,CAAAA,uBAAuB,CAAC,KAA/B,OAA8B,CAA9B,CACD,C,uCAEQ,iBAcH,KAbJ,KADO,CACD,KADC,aACD,KADC,CACD,aADC,aACD,aADC,CACD,QADC,aACD,QADC,CACD,UADC,aACD,UADC,CACD,WADC,aACD,WADC,CACD,mBADC,aACD,mBADC,CACD,SADC,aACD,SADC,CACD,UADC,aACD,UADC,CACD,gBADC,aACD,gBADC,CACD,kBADC,aACD,kBADC,CACD,kBADC,aACD,kBADC,CAaLE,cAbK,aAaLA,cAbK,CAgBP,GAAMP,CAAAA,eAAe,CAAG,KAAxB,kBAAwB,EAAxB,CACA,GAAMG,CAAAA,qBAAqB,CAAG,KAA9B,wBAA8B,EAA9B,CACA,GAAMC,CAAAA,iBAAiB,CAAG,KAA1B,oBAA0B,EAA1B,CACA,GAAMC,CAAAA,uBAAuB,CAAG,KAAhC,0BAAgC,EAAhC,CAEA,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CAAM,KAAK,CAAE,CAACG,MAAM,CAAP,SAAA,CAAA,mBAAA,CAAb,CAAA,CACG,KAAK,CAAL,GAAA,CAAU,SAAA,KAAA,CAAA,KAAA,CAA0B,iBACnC,GAAMC,CAAAA,OAAO,CAAGC,aAAa,GAAKC,KAAK,CAAvC,GAAA,CACA,GAAMC,CAAAA,KAAK,CAAGH,OAAO,CAAA,eAAA,CAArB,iBAAA,CACA,GAAMI,CAAAA,eAAe,CAAGJ,OAAO,CAAA,qBAAA,CAA/B,uBAAA,CAGA,GAAMK,CAAAA,KAAK,CAAG,CAAEH,KAAF,CAAEA,KAAF,CAASI,KAAT,CAASA,KAAT,CAAgBN,OAAhB,CAAgBA,OAAhB,CAAyBO,SAAS,CAAEJ,KAApC,CAAd,CACA,GAAMK,CAAAA,IAAI,CAAGC,UAAU,CAAvB,KAAuB,CAAvB,CACA,GAAMC,CAAAA,KAAK,CAAGC,QAAQ,CAAtB,KAAsB,CAAtB,CACA,GAAMC,CAAAA,kBAAkB,CACtB,MAAA,CAAA,KAAA,GAAA,QAAA,CAAA,KAAA,CADF,SAAA,CAEA,GAAMC,CAAAA,eAAe,CAAGb,OAAO,CAAA,gBAAA,CAA/B,kBAAA,CAGA,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,aAAA,CAAA,CACE,GAAG,CAAEE,KAAK,CADZ,GAAA,CAEE,UAAU,CAFZ,IAAA,CAGE,kBAAkB,CAHpB,kBAAA,CAIE,OAAO,CAAE,kBAAM,CACbY,WAAW,CAAC,CAAEZ,KAAF,CAAEA,KAAF,CAASF,OAAAA,CAAAA,OAAT,CAAD,CAAXc,CALJ,CAAA,CAOE,YAAY,CAAE,CAPhB,CAAA,CASE,KAAA,CAAA,aAAA,CAAA,YAAA,CAAA,CACE,KAAK,CAAE,CAAC,CAAEV,eAAAA,CAAAA,eAAF,CAAD,CAAsBL,MAAM,CAA5B,IAAA,CADT,SACS,CADT,CAEE,UAAU,8CACR,cADQ,CAAE,QAAF,+BAEPD,cAAc,GAAdA,MAAAA,CAAAA,OAAAA,CAAD,MAFQ,CAAE,OAAF,0CAGE,OAHF,cAFZ,CAAA,CAQGU,IAAI,CACH,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CACE,KAAK,CAAE,CACLT,MAAM,CADD,IAAA,CAELC,OAAO,CAAA,IAAA,CAAUD,MAAM,CAFlB,YAAA,CAAA,kBAAA,CADT,CAAA,CADG,IACH,CADG,CARP,IAAA,CAmBG,MAAA,CAAA,KAAA,GAAA,QAAA,CACC,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CACE,KAAK,CAAE,CACLA,MAAM,CADD,KAAA,CAEL,CAAEI,KAAAA,CAAAA,KAAF,CAFK,CAAA,UAAA,CAAA,eAAA,CADT,CAAA,CADD,KACC,CADD,CA7BP,KAUI,CATF,CADF,CAhBN,CAEK,CADH,CADF,CAiED,C,kCA5J+Cb,KAAK,CAAxC,S,SAAA,oB,6BAAMD,oB,gBAIG,CACpBE,eAAe,CAAE,CACfC,KAAK,CADU,SAAA,CAEfC,IAAI,CAAE,MAFS,CADG,CAKpBC,qBAAqB,CAAE,CACrBF,KAAK,CADgB,oBAAA,CAErBC,IAAI,CAAE,0BAFe,CALH,CASpBE,iBAAiB,CAAE,CACjBH,KAAK,CADY,oBAAA,CAEjBC,IAAI,CAAE,0BAFW,CATC,CAapBG,uBAAuB,CAAE,CACvBJ,KAAK,CADkB,aAAA,CAEvBC,IAAI,CAAE,aAFiB,CAbL,C,kBAJHJ,oB,eAuBEQ,Y,EAwIvB,GAAME,CAAAA,MAAM,CAAG,UAAU,CAAV,MAAA,CAAkB,CAC/BgB,SAAS,CAAE,CACTC,eAAe,CAAE,CADR,CADoB,CAI/BC,IAAI,CAAE,CACJC,aAAa,CADT,KAAA,CAEJC,UAAU,CAAE,QAFR,CAJyB,CAQ/BX,IAAI,CAAE,CACJY,gBAAgB,CADZ,EAAA,CAEJC,KAAK,CAFD,EAAA,CAGJF,UAAU,CAAE,QAHR,CARyB,CAa/BG,YAAY,CAAE,CAKZC,OAAO,CAAE,IALG,CAbiB,CAoB/Bb,KAAK,CAAE,CACLc,MAAM,CADD,EAAA,CAELC,UAAU,CAAE,MAFP,CApBwB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { SafeAreaView, ThemeContext } from 'react-navigation';\nimport TouchableItem from './TouchableItem';\nimport { DrawerNavigatorItemsProps } from '../types';\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default class DrawerNavigatorItems extends React.Component<\n  DrawerNavigatorItemsProps\n> {\n  /* Material design specs - https://material.io/guidelines/patterns/navigation-drawer.html#navigation-drawer-specs */\n  static defaultProps = {\n    activeTintColor: {\n      light: '#2196f3',\n      dark: '#fff',\n    },\n    activeBackgroundColor: {\n      light: 'rgba(0, 0, 0, .04)',\n      dark: 'rgba(255, 255, 255, .04)',\n    },\n    inactiveTintColor: {\n      light: 'rgba(0, 0, 0, .87)',\n      dark: 'rgba(255, 255, 255, .87)',\n    },\n    inactiveBackgroundColor: {\n      light: 'transparent',\n      dark: 'transparent',\n    },\n  };\n\n  static contextType = ThemeContext;\n  context!: React.ContextType<typeof ThemeContext>;\n\n  private getActiveTintColor() {\n    let { activeTintColor } = this.props;\n    if (!activeTintColor) {\n      return;\n    } else if (typeof activeTintColor === 'string') {\n      return activeTintColor;\n    }\n\n    return activeTintColor[this.context];\n  }\n\n  private getInactiveTintColor() {\n    let { inactiveTintColor } = this.props;\n    if (!inactiveTintColor) {\n      return;\n    } else if (typeof inactiveTintColor === 'string') {\n      return inactiveTintColor;\n    }\n\n    return inactiveTintColor[this.context];\n  }\n\n  private getActiveBackgroundColor() {\n    let { activeBackgroundColor } = this.props;\n    if (!activeBackgroundColor) {\n      return;\n    } else if (typeof activeBackgroundColor === 'string') {\n      return activeBackgroundColor;\n    }\n\n    return activeBackgroundColor[this.context];\n  }\n\n  private getInactiveBackgroundColor() {\n    let { inactiveBackgroundColor } = this.props;\n    if (!inactiveBackgroundColor) {\n      return;\n    } else if (typeof inactiveBackgroundColor === 'string') {\n      return inactiveBackgroundColor;\n    }\n\n    return inactiveBackgroundColor[this.context];\n  }\n\n  render() {\n    const {\n      items,\n      activeItemKey,\n      getLabel,\n      renderIcon,\n      onItemPress,\n      itemsContainerStyle,\n      itemStyle,\n      labelStyle,\n      activeLabelStyle,\n      inactiveLabelStyle,\n      iconContainerStyle,\n      drawerPosition,\n    } = this.props;\n\n    const activeTintColor = this.getActiveTintColor();\n    const activeBackgroundColor = this.getActiveBackgroundColor();\n    const inactiveTintColor = this.getInactiveTintColor();\n    const inactiveBackgroundColor = this.getInactiveBackgroundColor();\n\n    return (\n      <View style={[styles.container, itemsContainerStyle]}>\n        {items.map((route, index: number) => {\n          const focused = activeItemKey === route.key;\n          const color = focused ? activeTintColor : inactiveTintColor;\n          const backgroundColor = focused\n            ? activeBackgroundColor\n            : inactiveBackgroundColor;\n          const scene = { route, index, focused, tintColor: color };\n          const icon = renderIcon(scene);\n          const label = getLabel(scene);\n          const accessibilityLabel =\n            typeof label === 'string' ? label : undefined;\n          const extraLabelStyle = focused\n            ? activeLabelStyle\n            : inactiveLabelStyle;\n          return (\n            <TouchableItem\n              key={route.key}\n              accessible\n              accessibilityLabel={accessibilityLabel}\n              onPress={() => {\n                onItemPress({ route, focused });\n              }}\n              delayPressIn={0}\n            >\n              <SafeAreaView\n                style={[{ backgroundColor }, styles.item, itemStyle]}\n                forceInset={{\n                  [drawerPosition]: 'always',\n                  [drawerPosition === 'left' ? 'right' : 'left']: 'never',\n                  vertical: 'never',\n                }}\n              >\n                {icon ? (\n                  <View\n                    style={[\n                      styles.icon,\n                      focused ? null : styles.inactiveIcon,\n                      iconContainerStyle,\n                    ]}\n                  >\n                    {icon}\n                  </View>\n                ) : null}\n                {typeof label === 'string' ? (\n                  <Text\n                    style={[\n                      styles.label,\n                      { color },\n                      labelStyle,\n                      extraLabelStyle,\n                    ]}\n                  >\n                    {label}\n                  </Text>\n                ) : (\n                  label\n                )}\n              </SafeAreaView>\n            </TouchableItem>\n          );\n        })}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4,\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center',\n  },\n  inactiveIcon: {\n    /*\n     * Icons have 0.54 opacity according to guidelines\n     * 100/87 * 54 ~= 62\n     */\n    opacity: 0.62,\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
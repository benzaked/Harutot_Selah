{"ast":null,"code":"function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}export default function getChildEventSubscriber(addListener,key){var initialLastFocusEvent=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'didBlur';var actionSubscribers=new Set();var willFocusSubscribers=new Set();var didFocusSubscribers=new Set();var willBlurSubscribers=new Set();var didBlurSubscribers=new Set();var refocusSubscribers=new Set();var removeAll=function removeAll(){[actionSubscribers,willFocusSubscribers,didFocusSubscribers,willBlurSubscribers,didBlurSubscribers,refocusSubscribers].forEach(function(set){return set.clear();});upstreamSubscribers.forEach(function(subs){return subs&&subs.remove();});};var getChildSubscribers=function getChildSubscribers(evtName){switch(evtName){case'action':return actionSubscribers;case'willFocus':return willFocusSubscribers;case'didFocus':return didFocusSubscribers;case'willBlur':return willBlurSubscribers;case'didBlur':return didBlurSubscribers;case'refocus':return refocusSubscribers;default:return null;}};var _emit=function emit(type,payload){var payloadWithType=_objectSpread({},payload,{type:type});var subscribers=getChildSubscribers(type);subscribers&&subscribers.forEach(function(subs){subs(payloadWithType);});};var lastFocusEvent=initialLastFocusEvent;var upstreamEvents=['willFocus','didFocus','willBlur','didBlur','refocus','action'];var upstreamSubscribers=upstreamEvents.map(function(eventName){return addListener(eventName,function(payload){if(eventName==='refocus'){_emit(eventName,payload);return;}var state=payload.state,lastState=payload.lastState,action=payload.action;var lastRoutes=lastState&&lastState.routes;var routes=state&&state.routes;var focusKey=routes&&routes[state.index].key;var isChildFocused=focusKey===key;var lastRoute=lastRoutes&&lastRoutes.find(function(route){return route.key===key;});var newRoute=routes&&routes.find(function(route){return route.key===key;});var childPayload={context:\"\".concat(key,\":\").concat(action.type,\"_\").concat(payload.context||'Root'),state:newRoute,lastState:lastRoute,action:action,type:eventName};var isTransitioning=!!state&&state.isTransitioning;var previouslylastFocusEvent=lastFocusEvent;if(lastFocusEvent==='didBlur'){if(eventName==='willFocus'&&isChildFocused){_emit(lastFocusEvent='willFocus',childPayload);}else if(eventName==='action'&&isChildFocused){_emit(lastFocusEvent='willFocus',childPayload);}}if(lastFocusEvent==='willFocus'){if(eventName==='didFocus'&&isChildFocused&&!isTransitioning){_emit(lastFocusEvent='didFocus',childPayload);}else if(eventName==='action'&&isChildFocused&&!isTransitioning){_emit(lastFocusEvent='didFocus',childPayload);}}if(lastFocusEvent==='didFocus'){if(!isChildFocused){_emit(lastFocusEvent='willBlur',childPayload);}else if(eventName==='willBlur'){_emit(lastFocusEvent='willBlur',childPayload);}else if(eventName==='action'&&previouslylastFocusEvent==='didFocus'){_emit('action',childPayload);}}if(lastFocusEvent==='willBlur'){if(eventName==='action'&&!isChildFocused&&!isTransitioning){_emit(lastFocusEvent='didBlur',childPayload);}else if(eventName==='didBlur'){_emit(lastFocusEvent='didBlur',childPayload);}else if(eventName==='action'&&isChildFocused&&!isTransitioning){_emit(lastFocusEvent='didFocus',childPayload);}else if(eventName==='action'&&isChildFocused&&isTransitioning){_emit(lastFocusEvent='willFocus',childPayload);}}if(lastFocusEvent==='didBlur'&&!newRoute){removeAll();}});});return{addListener:function addListener(eventName,eventHandler){var subscribers=getChildSubscribers(eventName);if(!subscribers){throw new Error(\"Invalid event name \\\"\".concat(eventName,\"\\\"\"));}subscribers.add(eventHandler);var remove=function remove(){subscribers.delete(eventHandler);};return{remove:remove};},emit:function emit(eventName,payload){if(eventName!=='refocus'){console.error(\"navigation.emit only supports the 'refocus' event currently.\");return;}_emit(eventName,payload);}};}","map":{"version":3,"sources":["getChildEventSubscriber.js"],"names":["initialLastFocusEvent","actionSubscribers","willFocusSubscribers","didFocusSubscribers","willBlurSubscribers","didBlurSubscribers","refocusSubscribers","removeAll","set","upstreamSubscribers","subs","getChildSubscribers","evtName","emit","payloadWithType","type","subscribers","lastFocusEvent","upstreamEvents","eventName","addListener","payload","action","lastRoutes","lastState","routes","state","focusKey","isChildFocused","lastRoute","route","newRoute","childPayload","context","isTransitioning","previouslylastFocusEvent","remove","console"],"mappings":"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","sourcesContent":["/*\n * This is used to extract one children's worth of events from a stream of navigation action events\n *\n * Based on the 'action' events that get fired for this navigation state, this utility will fire\n * focus and blur events for this child\n */\nexport default function getChildEventSubscriber(\n  addListener,\n  key,\n  initialLastFocusEvent = 'didBlur'\n) {\n  const actionSubscribers = new Set();\n  const willFocusSubscribers = new Set();\n  const didFocusSubscribers = new Set();\n  const willBlurSubscribers = new Set();\n  const didBlurSubscribers = new Set();\n  const refocusSubscribers = new Set();\n\n  const removeAll = () => {\n    [\n      actionSubscribers,\n      willFocusSubscribers,\n      didFocusSubscribers,\n      willBlurSubscribers,\n      didBlurSubscribers,\n      refocusSubscribers,\n    ].forEach(set => set.clear());\n\n    upstreamSubscribers.forEach(subs => subs && subs.remove());\n  };\n\n  const getChildSubscribers = evtName => {\n    switch (evtName) {\n      case 'action':\n        return actionSubscribers;\n      case 'willFocus':\n        return willFocusSubscribers;\n      case 'didFocus':\n        return didFocusSubscribers;\n      case 'willBlur':\n        return willBlurSubscribers;\n      case 'didBlur':\n        return didBlurSubscribers;\n      case 'refocus':\n        return refocusSubscribers;\n      default:\n        return null;\n    }\n  };\n\n  const emit = (type, payload) => {\n    const payloadWithType = { ...payload, type };\n    const subscribers = getChildSubscribers(type);\n    subscribers &&\n      subscribers.forEach(subs => {\n        subs(payloadWithType);\n      });\n  };\n\n  // lastFocusEvent keeps track of focus state for one route. First we assume\n  // we are blurred. If we are focused on initialization, the first 'action'\n  // event will cause onFocus+willFocus events because we had previously been\n  // considered blurred\n  let lastFocusEvent = initialLastFocusEvent;\n\n  const upstreamEvents = [\n    'willFocus',\n    'didFocus',\n    'willBlur',\n    'didBlur',\n    'refocus',\n    'action',\n  ];\n\n  const upstreamSubscribers = upstreamEvents.map(eventName =>\n    addListener(eventName, payload => {\n      if (eventName === 'refocus') {\n        emit(eventName, payload);\n        return;\n      }\n\n      const { state, lastState, action } = payload;\n      const lastRoutes = lastState && lastState.routes;\n      const routes = state && state.routes;\n\n      // const lastFocusKey =\n      //   lastState && lastState.routes && lastState.routes[lastState.index].key;\n      const focusKey = routes && routes[state.index].key;\n\n      const isChildFocused = focusKey === key;\n      const lastRoute =\n        lastRoutes && lastRoutes.find(route => route.key === key);\n      const newRoute = routes && routes.find(route => route.key === key);\n      const childPayload = {\n        context: `${key}:${action.type}_${payload.context || 'Root'}`,\n        state: newRoute,\n        lastState: lastRoute,\n        action,\n        type: eventName,\n      };\n      const isTransitioning = !!state && state.isTransitioning;\n\n      const previouslylastFocusEvent = lastFocusEvent;\n\n      if (lastFocusEvent === 'didBlur') {\n        // The child is currently blurred. Look for willFocus conditions\n        if (eventName === 'willFocus' && isChildFocused) {\n          emit((lastFocusEvent = 'willFocus'), childPayload);\n        } else if (eventName === 'action' && isChildFocused) {\n          emit((lastFocusEvent = 'willFocus'), childPayload);\n        }\n      }\n      if (lastFocusEvent === 'willFocus') {\n        // We are currently mid-focus. Look for didFocus conditions.\n        // If state.isTransitioning is false, this child event happens immediately after willFocus\n        if (eventName === 'didFocus' && isChildFocused && !isTransitioning) {\n          emit((lastFocusEvent = 'didFocus'), childPayload);\n        } else if (\n          eventName === 'action' &&\n          isChildFocused &&\n          !isTransitioning\n        ) {\n          emit((lastFocusEvent = 'didFocus'), childPayload);\n        }\n      }\n\n      if (lastFocusEvent === 'didFocus') {\n        // The child is currently focused. Look for blurring events\n        if (!isChildFocused) {\n          // The child is no longer focused within this navigation state\n          emit((lastFocusEvent = 'willBlur'), childPayload);\n        } else if (eventName === 'willBlur') {\n          // The parent is getting a willBlur event\n          emit((lastFocusEvent = 'willBlur'), childPayload);\n        } else if (\n          eventName === 'action' &&\n          previouslylastFocusEvent === 'didFocus'\n        ) {\n          // While focused, pass action events to children for grandchildren focus\n          emit('action', childPayload);\n        }\n      }\n\n      if (lastFocusEvent === 'willBlur') {\n        // The child is mid-blur. Wait for transition to end\n        if (eventName === 'action' && !isChildFocused && !isTransitioning) {\n          // The child is done blurring because transitioning is over, or isTransitioning\n          // never began and didBlur fires immediately after willBlur\n          emit((lastFocusEvent = 'didBlur'), childPayload);\n        } else if (eventName === 'didBlur') {\n          // Pass through the parent didBlur event if it happens\n          emit((lastFocusEvent = 'didBlur'), childPayload);\n        } else if (\n          eventName === 'action' &&\n          isChildFocused &&\n          !isTransitioning\n        ) {\n          emit((lastFocusEvent = 'didFocus'), childPayload);\n        } else if (\n          eventName === 'action' &&\n          isChildFocused &&\n          isTransitioning\n        ) {\n          emit((lastFocusEvent = 'willFocus'), childPayload);\n        }\n      }\n\n      if (lastFocusEvent === 'didBlur' && !newRoute) {\n        removeAll();\n      }\n    })\n  );\n\n  return {\n    addListener(eventName, eventHandler) {\n      const subscribers = getChildSubscribers(eventName);\n      if (!subscribers) {\n        throw new Error(`Invalid event name \"${eventName}\"`);\n      }\n      subscribers.add(eventHandler);\n      const remove = () => {\n        subscribers.delete(eventHandler);\n      };\n      return { remove };\n    },\n    emit(eventName, payload) {\n      if (eventName !== 'refocus') {\n        console.error(\n          `navigation.emit only supports the 'refocus' event currently.`\n        );\n        return;\n      }\n      emit(eventName, payload);\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
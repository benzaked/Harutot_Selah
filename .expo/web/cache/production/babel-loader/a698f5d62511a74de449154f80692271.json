{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import PropTypes from'prop-types';import React from'react';import ColorPropType from\"react-native-web/dist/exports/ColorPropType\";import ViewPropTypes from\"react-native-web/dist/exports/ViewPropTypes\";import View from\"react-native-web/dist/exports/View\";import decorateMapComponent,{USES_DEFAULT_IMPLEMENTATION,SUPPORTED}from\"./decorateMapComponent\";var viewPropTypes=ViewPropTypes||View.propTypes;var propTypes=_objectSpread({},viewPropTypes,{center:PropTypes.shape({latitude:PropTypes.number.isRequired,longitude:PropTypes.number.isRequired}).isRequired,radius:PropTypes.number.isRequired,onPress:PropTypes.func,strokeWidth:PropTypes.number,strokeColor:ColorPropType,fillColor:ColorPropType,zIndex:PropTypes.number,lineCap:PropTypes.oneOf(['butt','round','square']),lineJoin:PropTypes.oneOf(['miter','round','bevel']),miterLimit:PropTypes.number,lineDashPhase:PropTypes.number,lineDashPattern:PropTypes.arrayOf(PropTypes.number)});var defaultProps={strokeColor:'#000',strokeWidth:1};var MapCircle=function(_React$Component){_inherits(MapCircle,_React$Component);function MapCircle(){_classCallCheck(this,MapCircle);return _possibleConstructorReturn(this,_getPrototypeOf(MapCircle).apply(this,arguments));}_createClass(MapCircle,[{key:\"setNativeProps\",value:function setNativeProps(props){this.circle.setNativeProps(props);}},{key:\"render\",value:function render(){var _this=this;var AIRMapCircle=this.getAirComponent();return React.createElement(AIRMapCircle,_extends({},this.props,{ref:function ref(_ref){_this.circle=_ref;}}));}}]);return MapCircle;}(React.Component);MapCircle.propTypes=propTypes;MapCircle.defaultProps=defaultProps;export default decorateMapComponent(MapCircle,{componentType:'Circle',providers:{google:{ios:SUPPORTED,android:USES_DEFAULT_IMPLEMENTATION}}});","map":{"version":3,"sources":["C:/final project/react native/finalProject-master/node_modules/react-native-maps/lib/components/MapCircle.js"],"names":["PropTypes","React","decorateMapComponent","USES_DEFAULT_IMPLEMENTATION","SUPPORTED","viewPropTypes","ViewPropTypes","View","propTypes","center","shape","latitude","number","isRequired","longitude","radius","onPress","func","strokeWidth","strokeColor","ColorPropType","fillColor","zIndex","lineCap","oneOf","lineJoin","miterLimit","lineDashPhase","lineDashPattern","arrayOf","defaultProps","MapCircle","props","circle","setNativeProps","AIRMapCircle","getAirComponent","ref","Component","componentType","providers","google","ios","android"],"mappings":"uuCAAA,MAAOA,CAAAA,SAAP,KAAsB,YAAtB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,C,mMAEA,MAAOC,CAAAA,oBAAP,EACEC,2BADF,CAEEC,SAFF,8BAMA,GAAMC,CAAAA,aAAa,CAAGC,aAAa,EAAIC,IAAI,CAACC,SAA5C,CAEA,GAAMA,CAAAA,SAAS,kBACVH,aADU,EAMbI,MAAM,CAAET,SAAS,CAACU,KAAV,CAAgB,CAItBC,QAAQ,CAAEX,SAAS,CAACY,MAAV,CAAiBC,UAJL,CAKtBC,SAAS,CAAEd,SAAS,CAACY,MAAV,CAAiBC,UALN,CAAhB,EAMLA,UAZU,CAiBbE,MAAM,CAAEf,SAAS,CAACY,MAAV,CAAiBC,UAjBZ,CAsBbG,OAAO,CAAEhB,SAAS,CAACiB,IAtBN,CA2BbC,WAAW,CAAElB,SAAS,CAACY,MA3BV,CAgCbO,WAAW,CAAEC,aAhCA,CAqCbC,SAAS,CAAED,aArCE,CA8CbE,MAAM,CAAEtB,SAAS,CAACY,MA9CL,CAsDbW,OAAO,CAAEvB,SAAS,CAACwB,KAAV,CAAgB,CAAC,MAAD,CAAS,OAAT,CAAkB,QAAlB,CAAhB,CAtDI,CA8DbC,QAAQ,CAAEzB,SAAS,CAACwB,KAAV,CAAgB,CAAC,OAAD,CAAU,OAAV,CAAmB,OAAnB,CAAhB,CA9DG,CA0EbE,UAAU,CAAE1B,SAAS,CAACY,MA1ET,CAuFbe,aAAa,CAAE3B,SAAS,CAACY,MAvFZ,CAqGbgB,eAAe,CAAE5B,SAAS,CAAC6B,OAAV,CAAkB7B,SAAS,CAACY,MAA5B,CArGJ,EAAf,CAwGA,GAAMkB,CAAAA,YAAY,CAAG,CACnBX,WAAW,CAAE,MADM,CAEnBD,WAAW,CAAE,CAFM,CAArB,C,GAKMa,CAAAA,S,6RACWC,K,CAAO,CACpB,KAAKC,MAAL,CAAYC,cAAZ,CAA2BF,KAA3B,EACD,C,uCAEQ,gBACP,GAAMG,CAAAA,YAAY,CAAG,KAAKC,eAAL,EAArB,CACA,MACE,qBAAC,YAAD,aACM,KAAKJ,KADX,EAEE,GAAG,CAAE,aAAAK,IAAG,CAAI,CACV,KAAI,CAACJ,MAAL,CAAcI,IAAd,CACD,CAJH,GADF,CAQD,C,uBAfqBpC,KAAK,CAACqC,S,EAkB9BP,SAAS,CAACvB,SAAV,CAAsBA,SAAtB,CACAuB,SAAS,CAACD,YAAV,CAAyBA,YAAzB,CAEA,cAAe5B,CAAAA,oBAAoB,CAAC6B,SAAD,CAAY,CAC7CQ,aAAa,CAAE,QAD8B,CAE7CC,SAAS,CAAE,CACTC,MAAM,CAAE,CACNC,GAAG,CAAEtC,SADC,CAENuC,OAAO,CAAExC,2BAFH,CADC,CAFkC,CAAZ,CAAnC","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { ColorPropType, ViewPropTypes, View } from 'react-native';\nimport decorateMapComponent, {\n  USES_DEFAULT_IMPLEMENTATION,\n  SUPPORTED,\n} from './decorateMapComponent';\n\n// if ViewPropTypes is not defined fall back to View.propType (to support RN < 0.44)\nconst viewPropTypes = ViewPropTypes || View.propTypes;\n\nconst propTypes = {\n  ...viewPropTypes,\n\n  /**\n   * The coordinate of the center of the circle\n   */\n  center: PropTypes.shape({\n    /**\n     * Coordinates for the center of the circle.\n     */\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n  }).isRequired,\n\n  /**\n   * The radius of the circle to be drawn (in meters)\n   */\n  radius: PropTypes.number.isRequired,\n\n  /**\n   * Callback that is called when the user presses on the circle\n   */\n  onPress: PropTypes.func,\n\n  /**\n   * The stroke width to use for the path.\n   */\n  strokeWidth: PropTypes.number,\n\n  /**\n   * The stroke color to use for the path.\n   */\n  strokeColor: ColorPropType,\n\n  /**\n   * The fill color to use for the path.\n   */\n  fillColor: ColorPropType,\n\n  /**\n   * The order in which this tile overlay is drawn with respect to other overlays. An overlay\n   * with a larger z-index is drawn over overlays with smaller z-indices. The order of overlays\n   * with the same z-index is arbitrary. The default zIndex is 0.\n   *\n   * @platform android\n   */\n  zIndex: PropTypes.number,\n\n  /**\n   * The line cap style to apply to the open ends of the path.\n   * The default style is `round`.\n   *\n   * @platform ios\n   */\n  lineCap: PropTypes.oneOf(['butt', 'round', 'square']),\n\n  /**\n   * The line join style to apply to corners of the path.\n   * The default style is `round`.\n   *\n   * @platform ios\n   */\n  lineJoin: PropTypes.oneOf(['miter', 'round', 'bevel']),\n\n  /**\n   * The limiting value that helps avoid spikes at junctions between connected line segments.\n   * The miter limit helps you avoid spikes in paths that use the `miter` `lineJoin` style. If\n   * the ratio of the miter length—that is, the diagonal length of the miter join—to the line\n   * thickness exceeds the miter limit, the joint is converted to a bevel join. The default\n   * miter limit is 10, which results in the conversion of miters whose angle at the joint\n   * is less than 11 degrees.\n   *\n   * @platform ios\n   */\n  miterLimit: PropTypes.number,\n\n  /**\n   * The offset (in points) at which to start drawing the dash pattern.\n   *\n   * Use this property to start drawing a dashed line partway through a segment or gap. For\n   * example, a phase value of 6 for the patter 5-2-3-2 would cause drawing to begin in the\n   * middle of the first gap.\n   *\n   * The default value of this property is 0.\n   *\n   * @platform ios\n   */\n  lineDashPhase: PropTypes.number,\n\n  /**\n   * An array of numbers specifying the dash pattern to use for the path.\n   *\n   * The array contains one or more numbers that indicate the lengths (measured in points) of the\n   * line segments and gaps in the pattern. The values in the array alternate, starting with the\n   * first line segment length, followed by the first gap length, followed by the second line\n   * segment length, and so on.\n   *\n   * This property is set to `null` by default, which indicates no line dash pattern.\n   *\n   * @platform ios\n   */\n  lineDashPattern: PropTypes.arrayOf(PropTypes.number),\n};\n\nconst defaultProps = {\n  strokeColor: '#000',\n  strokeWidth: 1,\n};\n\nclass MapCircle extends React.Component {\n  setNativeProps(props) {\n    this.circle.setNativeProps(props);\n  }\n\n  render() {\n    const AIRMapCircle = this.getAirComponent();\n    return (\n      <AIRMapCircle\n        {...this.props}\n        ref={ref => {\n          this.circle = ref;\n        }}\n      />\n    );\n  }\n}\n\nMapCircle.propTypes = propTypes;\nMapCircle.defaultProps = defaultProps;\n\nexport default decorateMapComponent(MapCircle, {\n  componentType: 'Circle',\n  providers: {\n    google: {\n      ios: SUPPORTED,\n      android: USES_DEFAULT_IMPLEMENTATION,\n    },\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
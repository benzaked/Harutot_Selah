{"ast":null,"code":"import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _extends from\"@babel/runtime/helpers/extends\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import Text from\"react-native-web/dist/exports/Text\";import Dimensions from\"react-native-web/dist/exports/Dimensions\";import GoogleMapView,{Marker,PROVIDER_GOOGLE}from'react-native-maps';import isEqual from'lodash.isequal';import SuperCluster from'supercluster';var ClusterMarker=function ClusterMarker(props){var coordinates=props.coordinates,pointCount=props.pointCount,children=props.children,onClusterMarkerPress=props.onClusterMarkerPress,clusterId=props.clusterId,clusterMarkerProps=props.clusterMarkerProps;if(pointCount<0){return null;}var onClusterPress=function onClusterPress(e){var coordinate=e.nativeEvent.coordinate;onClusterMarkerPress({clusterId:clusterId,coordinate:coordinate});};var _coordinates=_slicedToArray(coordinates,2),longitude=_coordinates[0],latitude=_coordinates[1];return React.createElement(Marker,_extends({coordinate:{longitude:longitude,latitude:latitude},onPress:onClusterPress},clusterMarkerProps),children||React.createElement(View,{style:styles.clusterBox},React.createElement(Text,{style:styles.clusterText},pointCount)));};var styles=StyleSheet.create({clusterBox:{height:60,width:60,borderWidth:2,borderColor:'#5694f7',backgroundColor:'#fff',borderRadius:31,alignItems:'center',justifyContent:'center'},clusterText:{fontSize:19,color:'#5694f7'}});var PACKAGE_PROPS=['isClusterExpandClick','superClusterOptions','renderClusterMarker','style','onMapReady','onRegionChangeComplete','region','onClusterClick','priorityMarker','onZoomChange'];var serializeProps=function serializeProps(userProps){return Object.keys(userProps).reduce(function(newProps,propKey){if(PACKAGE_PROPS.find(function(prop){return prop===propKey;})){return newProps;}return _extends({},newProps,_defineProperty({},propKey,userProps[propKey]));},{});};var makeId=function makeId(){var id='';var possibleChar='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';for(var i=0;i<10;i++){id+=possibleChar.charAt(Math.floor(Math.random()*possibleChar.length));}return id;};var calculateDelta=function calculateDelta(x,y){return x>y?x-y:y-x;};var calculateAverage=function calculateAverage(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}var argList=[].concat(args);if(!argList.length){return 0;}return argList.reduce(function(sum,num){return sum+num;},0)/argList.length;};var DEFAULT_SUPERCLUSTER_OPTIONS={radius:16,maxZoom:15,minZoom:1,nodeSize:16};var INCREASE_RATE=2;var ClusterService=function(){function ClusterService(){var _this=this;_classCallCheck(this,ClusterService);this.superCluster=null;this.markers=null;this.getClustersOptions=function(region){var bBox=_this.regionTobBox(region);var zoom=_this.getBoundsZoomLevel(bBox);return{markers:_this.superCluster.getClusters(bBox,zoom),zoom:zoom};};this.expandCluster=function(clusterId){var clusterMarkersCoordinates=_this.getClusterMarkers(clusterId).map(_this.getMarkersCoordinates);return _this.getMarkersRegion(clusterMarkersCoordinates);};this.createGeoJsonFeature=function(element){return{type:'Feature',geometry:{type:'Point',coordinates:[element.props.coordinate.longitude,element.props.coordinate.latitude]},properties:{element:element}};};this.getBoundsZoomLevel=function(bounds){var ZOOM_MAX=20;var WORLD_DIM=_this.getDimensions();function latRad(lat){var sin=Math.sin(lat*Math.PI/180);var radX2=Math.log((1+sin)/(1-sin))/2;return Math.max(Math.min(radX2,Math.PI),-Math.PI)/2;}function zoom(mapPx,worldPx,fraction){return Math.floor(Math.log(mapPx/worldPx/fraction)/Math.LN2);}var latFraction=(latRad(bounds[3])-latRad(bounds[1]))/Math.PI;var lngDiff=bounds[2]-bounds[0];var lngFraction=(lngDiff<0?lngDiff+360:lngDiff)/360;var latZoom=zoom(WORLD_DIM.height,WORLD_DIM.height,latFraction);var lngZoom=zoom(WORLD_DIM.width,WORLD_DIM.width,lngFraction);return Math.min(latZoom,lngZoom,ZOOM_MAX);};this.regionTobBox=function(region){var lngD=region.longitudeDelta<0?region.longitudeDelta+360:region.longitudeDelta;return[region.longitude-lngD,region.latitude-region.latitudeDelta,region.longitude+lngD,region.latitude+region.latitudeDelta];};this.getDimensions=function(){return{height:Dimensions.get('window').height,width:Dimensions.get('window').width};};this.createMarkers=function(children){if(!children){return[];}if(!Array.isArray(children)){return[children];}return children;};this.getClusterMarkers=function(clusterId){var clusterChildren=_this.superCluster.getChildren(clusterId);if(clusterChildren.length>1){return clusterChildren;}return _this.getClusterMarkers(clusterChildren[0].id);};this.getMarkersRegion=function(points){var coordinates={minX:points[0].latitude,maxX:points[0].latitude,maxY:points[0].longitude,minY:points[0].longitude};var _points$reduce=points.reduce(function(acc,point){return{minX:Math.min(acc.minX,point.latitude),maxX:Math.max(acc.maxX,point.latitude),minY:Math.min(acc.minY,point.longitude),maxY:Math.max(acc.maxY,point.longitude)};},_extends({},coordinates)),maxX=_points$reduce.maxX,minX=_points$reduce.minX,maxY=_points$reduce.maxY,minY=_points$reduce.minY;var deltaX=calculateDelta(maxX,minX);var deltaY=calculateDelta(maxY,minY);return{latitude:calculateAverage(minX,maxX),longitude:calculateAverage(minY,maxY),latitudeDelta:deltaX*INCREASE_RATE,longitudeDelta:deltaY*INCREASE_RATE};};this.getMarkersCoordinates=function(markers){var _markers$geometry$coo=_slicedToArray(markers.geometry.coordinates,2),longitude=_markers$geometry$coo[0],latitude=_markers$geometry$coo[1];return{longitude:longitude,latitude:latitude};};}_createClass(ClusterService,[{key:\"createClusters\",value:function createClusters(propsOptions,children){var options=propsOptions||DEFAULT_SUPERCLUSTER_OPTIONS;this.superCluster=new SuperCluster(options);this.markers=this.createMarkers(children).map(this.createGeoJsonFeature);this.superCluster.load(this.markers);}}]);return ClusterService;}();var clusterService=new ClusterService();var CLUSTER_EXPAND_TIME=100;var ClusterMap=function(_React$PureComponent){_inherits(ClusterMap,_React$PureComponent);function ClusterMap(){var _this2;_classCallCheck(this,ClusterMap);_this2=_possibleConstructorReturn(this,_getPrototypeOf(ClusterMap).apply(this,arguments));_this2.state={markers:[],isMapLoaded:false};_this2.onRegionChangeComplete=function(region){_this2.generateMarkers(region);_this2.props.onRegionChangeComplete&&_this2.props.onRegionChangeComplete(region);};_this2.clusterize=function(){var _this2$props=_this2.props,superClusterOptions=_this2$props.superClusterOptions,region=_this2$props.region,children=_this2$props.children;clusterService.createClusters(superClusterOptions,children);_this2.generateMarkers(region);};_this2.onClusterMarkerPress=function(event){var _this2$props2=_this2.props,isClusterExpandClick=_this2$props2.isClusterExpandClick,onClusterClick=_this2$props2.onClusterClick;var clusterId=event.clusterId;if(isClusterExpandClick){var region=clusterService.expandCluster(clusterId);_this2.mapRef.animateToRegion(region,CLUSTER_EXPAND_TIME);}onClusterClick&&onClusterClick(event);};_this2.renderMarkers=function(){var markers=_this2.state.markers;var _this2$props3=_this2.props,renderClusterMarker=_this2$props3.renderClusterMarker,clusterMarkerProps=_this2$props3.clusterMarkerProps;return markers.map(function(marker){var properties=marker.properties,geometry=marker.geometry;var cluster=properties.cluster,element=properties.element,point_count=properties.point_count;var key=makeId();if(!cluster&&element){return element;}return React.createElement(ClusterMarker,{pointCount:point_count,coordinates:geometry.coordinates,onClusterMarkerPress:_this2.onClusterMarkerPress,clusterId:marker.properties.cluster_id,clusterMarkerProps:clusterMarkerProps,key:key},renderClusterMarker&&renderClusterMarker(point_count));});};_this2.onMapReady=function(){_this2.setState({isMapLoaded:true},function(){return _this2.props.onMapReady&&_this2.props.onMapReady();});};return _this2;}_createClass(ClusterMap,[{key:\"render\",value:function render(){var _this3=this;var _this$props=this.props,style=_this$props.style,region=_this$props.region,priorityMarker=_this$props.priorityMarker;return React.createElement(GoogleMapView,_extends({},serializeProps(this.props),{ref:function ref(_ref){return _this3.mapRef=_ref;},style:style||styles$1.map,onMapReady:this.onMapReady,initialRegion:region,onRegionChangeComplete:this.onRegionChangeComplete,provider:PROVIDER_GOOGLE}),this.state.isMapLoaded&&this.renderMarkers(),priorityMarker?priorityMarker:null);}},{key:\"componentDidMount\",value:function componentDidMount(){this.clusterize();}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){if(isEqual(this.props.children,prevProps.children)){return;}this.clusterize();}},{key:\"generateMarkers\",value:function generateMarkers(region){var onZoomChange=this.props.onZoomChange;var _clusterService$getCl=clusterService.getClustersOptions(region),markers=_clusterService$getCl.markers,zoom=_clusterService$getCl.zoom;if(onZoomChange){onZoomChange(zoom);}this.setState({markers:markers});}}]);return ClusterMap;}(React.PureComponent);ClusterMap.defaultProps={isClusterExpandClick:true};var styles$1=StyleSheet.create({map:_extends({},StyleSheet.absoluteFillObject)});export{ClusterMap};","map":{"version":3,"sources":["C:/final project/react native/finalProject-master/node_modules/react-native-cluster-map/lib/index.es.js"],"names":["React","GoogleMapView","Marker","PROVIDER_GOOGLE","isEqual","SuperCluster","ClusterMarker","props","coordinates","pointCount","children","onClusterMarkerPress","clusterId","clusterMarkerProps","onClusterPress","e","coordinate","nativeEvent","longitude","latitude","createElement","onPress","View","style","styles","clusterBox","Text","clusterText","StyleSheet","create","height","width","borderWidth","borderColor","backgroundColor","borderRadius","alignItems","justifyContent","fontSize","color","PACKAGE_PROPS","serializeProps","userProps","Object","keys","reduce","newProps","propKey","find","prop","makeId","id","possibleChar","i","charAt","Math","floor","random","length","calculateDelta","x","y","calculateAverage","args","argList","sum","num","DEFAULT_SUPERCLUSTER_OPTIONS","radius","maxZoom","minZoom","nodeSize","INCREASE_RATE","ClusterService","superCluster","markers","getClustersOptions","region","bBox","regionTobBox","zoom","getBoundsZoomLevel","getClusters","expandCluster","clusterMarkersCoordinates","getClusterMarkers","map","getMarkersCoordinates","getMarkersRegion","createGeoJsonFeature","element","type","geometry","properties","bounds","ZOOM_MAX","WORLD_DIM","getDimensions","latRad","lat","sin","PI","radX2","log","max","min","mapPx","worldPx","fraction","LN2","latFraction","lngDiff","lngFraction","latZoom","lngZoom","lngD","longitudeDelta","latitudeDelta","Dimensions","get","createMarkers","Array","isArray","clusterChildren","getChildren","points","minX","maxX","maxY","minY","acc","point","deltaX","deltaY","propsOptions","options","load","clusterService","CLUSTER_EXPAND_TIME","ClusterMap","arguments","state","isMapLoaded","onRegionChangeComplete","generateMarkers","clusterize","superClusterOptions","createClusters","event","isClusterExpandClick","onClusterClick","mapRef","animateToRegion","renderMarkers","renderClusterMarker","marker","cluster","point_count","key","cluster_id","onMapReady","setState","priorityMarker","ref","styles$1","initialRegion","provider","prevProps","onZoomChange","PureComponent","defaultProps","absoluteFillObject"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, View, Text, Dimensions } from 'react-native';\nimport GoogleMapView, { Marker, PROVIDER_GOOGLE } from 'react-native-maps';\nimport isEqual from 'lodash.isequal';\nimport SuperCluster from 'supercluster';\n\nconst ClusterMarker = (props) => {\r\n    const { coordinates, pointCount, children, onClusterMarkerPress, clusterId, clusterMarkerProps, } = props;\r\n    if (pointCount < 0) {\r\n        return null;\r\n    }\r\n    const onClusterPress = (e) => {\r\n        const { coordinate } = e.nativeEvent;\r\n        onClusterMarkerPress({ clusterId, coordinate });\r\n    };\r\n    const [longitude, latitude] = coordinates;\r\n    return (React.createElement(Marker, Object.assign({ coordinate: { longitude, latitude }, onPress: onClusterPress }, clusterMarkerProps), children || (React.createElement(View, { style: styles.clusterBox },\r\n        React.createElement(Text, { style: styles.clusterText }, pointCount)))));\r\n};\r\nconst styles = StyleSheet.create({\r\n    clusterBox: {\r\n        height: 60,\r\n        width: 60,\r\n        borderWidth: 2,\r\n        borderColor: '#5694f7',\r\n        backgroundColor: '#fff',\r\n        borderRadius: 31,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    clusterText: {\r\n        fontSize: 19,\r\n        color: '#5694f7',\r\n    },\r\n});\n\nconst PACKAGE_PROPS = [\r\n    'isClusterExpandClick',\r\n    'superClusterOptions',\r\n    'renderClusterMarker',\r\n    'style',\r\n    'onMapReady',\r\n    'onRegionChangeComplete',\r\n    'region',\r\n    'onClusterClick',\r\n    'priorityMarker',\r\n    'onZoomChange',\r\n];\r\nconst serializeProps = (userProps) => {\r\n    return Object.keys(userProps).reduce((newProps, propKey) => {\r\n        if (PACKAGE_PROPS.find((prop) => prop === propKey)) {\r\n            return newProps;\r\n        }\r\n        return Object.assign({}, newProps, { [propKey]: userProps[propKey] });\r\n    }, {});\r\n};\r\nconst makeId = () => {\r\n    let id = '';\r\n    const possibleChar = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    for (let i = 0; i < 10; i++) {\r\n        id += possibleChar.charAt(Math.floor(Math.random() * possibleChar.length));\r\n    }\r\n    return id;\r\n};\r\nconst calculateDelta = (x, y) => x > y ? x - y : y - x;\r\nconst calculateAverage = (...args) => {\r\n    const argList = [...args];\r\n    if (!argList.length) {\r\n        return 0;\r\n    }\r\n    return argList.reduce((sum, num) => sum + num, 0) / argList.length;\r\n};\n\nconst DEFAULT_SUPERCLUSTER_OPTIONS = {\r\n    radius: 16,\r\n    maxZoom: 15,\r\n    minZoom: 1,\r\n    nodeSize: 16,\r\n};\r\nconst INCREASE_RATE = 2;\r\nclass ClusterService {\r\n    constructor() {\r\n        this.superCluster = null;\r\n        this.markers = null;\r\n        // TODO: Add unit test\r\n        this.getClustersOptions = (region) => {\r\n            const bBox = this.regionTobBox(region);\r\n            const zoom = this.getBoundsZoomLevel(bBox);\r\n            return {\r\n                markers: this.superCluster.getClusters(bBox, zoom),\r\n                zoom,\r\n            };\r\n        };\r\n        // TODO: Add unit test\r\n        this.expandCluster = (clusterId) => {\r\n            const clusterMarkersCoordinates = this.getClusterMarkers(clusterId).map(this.getMarkersCoordinates);\r\n            return this.getMarkersRegion(clusterMarkersCoordinates);\r\n        };\r\n        this.createGeoJsonFeature = (element) => ({\r\n            type: 'Feature',\r\n            geometry: {\r\n                type: 'Point',\r\n                coordinates: [\r\n                    element.props.coordinate.longitude,\r\n                    element.props.coordinate.latitude,\r\n                ],\r\n            },\r\n            properties: { element },\r\n        });\r\n        // TODO: Add unit test\r\n        this.getBoundsZoomLevel = (bounds) => {\r\n            const ZOOM_MAX = 20;\r\n            const WORLD_DIM = this.getDimensions();\r\n            function latRad(lat) {\r\n                const sin = Math.sin((lat * Math.PI) / 180);\r\n                const radX2 = Math.log((1 + sin) / (1 - sin)) / 2;\r\n                return Math.max(Math.min(radX2, Math.PI), -Math.PI) / 2;\r\n            }\r\n            function zoom(mapPx, worldPx, fraction) {\r\n                return Math.floor(Math.log(mapPx / worldPx / fraction) / Math.LN2);\r\n            }\r\n            const latFraction = (latRad(bounds[3]) - latRad(bounds[1])) / Math.PI;\r\n            const lngDiff = bounds[2] - bounds[0];\r\n            const lngFraction = (lngDiff < 0 ? lngDiff + 360 : lngDiff) / 360;\r\n            const latZoom = zoom(WORLD_DIM.height, WORLD_DIM.height, latFraction);\r\n            const lngZoom = zoom(WORLD_DIM.width, WORLD_DIM.width, lngFraction);\r\n            return Math.min(latZoom, lngZoom, ZOOM_MAX);\r\n        };\r\n        this.regionTobBox = (region) => {\r\n            const lngD = region.longitudeDelta < 0\r\n                ? region.longitudeDelta + 360\r\n                : region.longitudeDelta;\r\n            return [\r\n                region.longitude - lngD,\r\n                region.latitude - region.latitudeDelta,\r\n                region.longitude + lngD,\r\n                region.latitude + region.latitudeDelta,\r\n            ];\r\n        };\r\n        this.getDimensions = () => {\r\n            return {\r\n                height: Dimensions.get('window').height,\r\n                width: Dimensions.get('window').width,\r\n            };\r\n        };\r\n        this.createMarkers = (children) => {\r\n            if (!children) {\r\n                return [];\r\n            }\r\n            if (!Array.isArray(children)) {\r\n                return [children];\r\n            }\r\n            return children;\r\n        };\r\n        // TODO: Add unit test\r\n        this.getClusterMarkers = (clusterId) => {\r\n            const clusterChildren = this.superCluster.getChildren(clusterId);\r\n            if (clusterChildren.length > 1) {\r\n                return clusterChildren;\r\n            }\r\n            return this.getClusterMarkers(clusterChildren[0].id);\r\n        };\r\n        this.getMarkersRegion = (points) => {\r\n            const coordinates = {\r\n                minX: points[0].latitude,\r\n                maxX: points[0].latitude,\r\n                maxY: points[0].longitude,\r\n                minY: points[0].longitude,\r\n            };\r\n            const { maxX, minX, maxY, minY } = points.reduce((acc, point) => ({\r\n                minX: Math.min(acc.minX, point.latitude),\r\n                maxX: Math.max(acc.maxX, point.latitude),\r\n                minY: Math.min(acc.minY, point.longitude),\r\n                maxY: Math.max(acc.maxY, point.longitude),\r\n            }), Object.assign({}, coordinates));\r\n            const deltaX = calculateDelta(maxX, minX);\r\n            const deltaY = calculateDelta(maxY, minY);\r\n            return {\r\n                latitude: calculateAverage(minX, maxX),\r\n                longitude: calculateAverage(minY, maxY),\r\n                latitudeDelta: deltaX * INCREASE_RATE,\r\n                longitudeDelta: deltaY * INCREASE_RATE,\r\n            };\r\n        };\r\n        this.getMarkersCoordinates = (markers) => {\r\n            const [longitude, latitude] = markers.geometry.coordinates;\r\n            return { longitude, latitude };\r\n        };\r\n    }\r\n    createClusters(propsOptions, children) {\r\n        const options = propsOptions || DEFAULT_SUPERCLUSTER_OPTIONS;\r\n        this.superCluster = new SuperCluster(options);\r\n        this.markers = this.createMarkers(children).map(this.createGeoJsonFeature);\r\n        this.superCluster.load(this.markers);\r\n    }\r\n}\r\nconst clusterService = new ClusterService();\n\nconst CLUSTER_EXPAND_TIME = 100;\r\nclass ClusterMap extends React.PureComponent {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            markers: [],\r\n            isMapLoaded: false,\r\n        };\r\n        this.onRegionChangeComplete = (region) => {\r\n            this.generateMarkers(region);\r\n            this.props.onRegionChangeComplete &&\r\n                this.props.onRegionChangeComplete(region);\r\n        };\r\n        this.clusterize = () => {\r\n            const { superClusterOptions, region, children } = this.props;\r\n            clusterService.createClusters(superClusterOptions, children);\r\n            this.generateMarkers(region);\r\n        };\r\n        this.onClusterMarkerPress = (event) => {\r\n            const { isClusterExpandClick, onClusterClick } = this.props;\r\n            const { clusterId } = event;\r\n            if (isClusterExpandClick) {\r\n                const region = clusterService.expandCluster(clusterId);\r\n                this.mapRef.animateToRegion(region, CLUSTER_EXPAND_TIME);\r\n            }\r\n            onClusterClick && onClusterClick(event);\r\n        };\r\n        this.renderMarkers = () => {\r\n            const { markers } = this.state;\r\n            const { renderClusterMarker, clusterMarkerProps } = this.props;\r\n            return markers.map((marker) => {\r\n                const { properties, geometry } = marker;\r\n                const { cluster, element, point_count } = properties;\r\n                const key = makeId();\r\n                if (!cluster && element) {\r\n                    return element;\r\n                }\r\n                return (React.createElement(ClusterMarker, { pointCount: point_count, coordinates: geometry.coordinates, onClusterMarkerPress: this.onClusterMarkerPress, clusterId: marker.properties.cluster_id, clusterMarkerProps: clusterMarkerProps, key: key }, renderClusterMarker && renderClusterMarker(point_count)));\r\n            });\r\n        };\r\n        this.onMapReady = () => {\r\n            this.setState({\r\n                isMapLoaded: true,\r\n            }, () => this.props.onMapReady && this.props.onMapReady());\r\n        };\r\n    }\r\n    render() {\r\n        const { style, region, priorityMarker } = this.props;\r\n        return (React.createElement(GoogleMapView, Object.assign({}, serializeProps(this.props), { ref: (ref) => (this.mapRef = ref), style: style || styles$1.map, onMapReady: this.onMapReady, initialRegion: region, onRegionChangeComplete: this.onRegionChangeComplete, provider: PROVIDER_GOOGLE }),\r\n            this.state.isMapLoaded && this.renderMarkers(),\r\n            priorityMarker ? priorityMarker : null));\r\n    }\r\n    componentDidMount() {\r\n        this.clusterize();\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if (isEqual(this.props.children, prevProps.children)) {\r\n            return;\r\n        }\r\n        this.clusterize();\r\n    }\r\n    generateMarkers(region) {\r\n        const { onZoomChange } = this.props;\r\n        const { markers, zoom } = clusterService.getClustersOptions(region);\r\n        if (onZoomChange) {\r\n            onZoomChange(zoom);\r\n        }\r\n        this.setState({\r\n            markers,\r\n        });\r\n    }\r\n}\r\nClusterMap.defaultProps = {\r\n    isClusterExpandClick: true,\r\n};\r\nconst styles$1 = StyleSheet.create({\r\n    map: Object.assign({}, StyleSheet.absoluteFillObject),\r\n});\n\nexport { ClusterMap };\n"]},"metadata":{},"sourceType":"module"}
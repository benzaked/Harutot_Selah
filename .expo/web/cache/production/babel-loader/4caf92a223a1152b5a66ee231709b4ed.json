{"ast":null,"code":"function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import Dimensions from\"react-native-web/dist/exports/Dimensions\";import Platform from\"react-native-web/dist/exports/Platform\";import ScrollView from\"react-native-web/dist/exports/ScrollView\";import I18nManager from\"react-native-web/dist/exports/I18nManager\";import{createNavigator,ThemeColors,SafeAreaView}from'react-navigation';import DrawerRouter from\"../routers/DrawerRouter\";import DrawerView from\"../views/DrawerView\";import DrawerItems from\"../views/DrawerNavigatorItems\";var defaultContentComponent=function defaultContentComponent(props){return React.createElement(ScrollView,{alwaysBounceVertical:false},React.createElement(SafeAreaView,{forceInset:{top:'always',horizontal:'never'}},React.createElement(DrawerItems,props)));};var DefaultDrawerConfig={drawerWidth:function drawerWidth(){var _Dimensions$get=Dimensions.get('window'),height=_Dimensions$get.height,width=_Dimensions$get.width;var smallerAxisSize=Math.min(height,width);var isLandscape=width>height;var isTablet=smallerAxisSize>=600;var appBarHeight=Platform.OS==='ios'?isLandscape?32:44:56;var maxWidth=isTablet?320:280;return Math.min(smallerAxisSize-appBarHeight,maxWidth);},contentComponent:defaultContentComponent,drawerPosition:I18nManager.isRTL?'right':'left',keyboardDismissMode:'on-drag',drawerBackgroundColor:{light:ThemeColors.light.bodyContent,dark:ThemeColors.dark.bodyContent},overlayColor:{light:'rgba(0, 0, 0, 0.5)',dark:'rgba(0, 0, 0, 0.5)'},drawerType:'front',hideStatusBar:false,statusBarAnimation:'slide'};var DrawerNavigator=function DrawerNavigator(routeConfigs){var config=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var mergedConfig=_objectSpread({},DefaultDrawerConfig,{},config);var drawerRouter=DrawerRouter(routeConfigs,mergedConfig);var navigator=createNavigator(DrawerView,drawerRouter,mergedConfig);return navigator;};export default DrawerNavigator;","map":{"version":3,"sources":["createDrawerNavigator.tsx"],"names":["defaultContentComponent","props","top","horizontal","DefaultDrawerConfig","drawerWidth","width","Dimensions","smallerAxisSize","Math","isLandscape","isTablet","appBarHeight","Platform","maxWidth","contentComponent","drawerPosition","I18nManager","keyboardDismissMode","drawerBackgroundColor","light","ThemeColors","dark","bodyContent","overlayColor","drawerType","hideStatusBar","statusBarAnimation","DrawerNavigator","config","mergedConfig","drawerRouter","DrawerRouter","navigator","createNavigator"],"mappings":"k9BAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,kQAEA,OAAA,eAAA,CAAA,WAAA,CAAA,YAAA,KAAA,kBAAA,CAQA,MAAA,CAAA,YAAA,+BACA,MAAA,CAAA,UAAA,2BACA,MAAA,CAAA,WAAA,qCASA,GAAMA,CAAAA,uBAAuB,CAAIC,QAA3BD,CAAAA,uBAA2BC,CAAAA,KAAD,QAC9B,CAAA,KAAA,CAAA,aAAA,CAAA,UAAA,CAAA,CAAY,oBAAoB,CAAE,KAAlC,CAAA,CACE,KAAA,CAAA,aAAA,CAAA,YAAA,CAAA,CAAc,UAAU,CAAE,CAAEC,GAAG,CAAL,QAAA,CAAiBC,UAAU,CAAE,OAA7B,CAA1B,CAAA,CACE,KAAA,CAAA,aAAA,CAAA,WAAA,CAHN,KAGM,CADF,CADF,CAD8B,EAAhC,CAQA,GAAMC,CAAAA,mBAA2C,CAAG,CAClDC,WAAW,CAAE,sBAAM,qBAMSE,UAAU,CAAVA,GAAAA,CAA1B,QAA0BA,CANT,CAMX,MANW,iBAMX,MANW,CAMDD,KANC,iBAMDA,KANC,CAOjB,GAAME,CAAAA,eAAe,CAAGC,IAAI,CAAJA,GAAAA,CAAAA,MAAAA,CAAxB,KAAwBA,CAAxB,CACA,GAAMC,CAAAA,WAAW,CAAGJ,KAAK,CAAzB,MAAA,CACA,GAAMK,CAAAA,QAAQ,CAAGH,eAAe,EAAhC,GAAA,CACA,GAAMI,CAAAA,YAAY,CAAGC,QAAQ,CAARA,EAAAA,GAAAA,KAAAA,CAAyBH,WAAW,CAAA,EAAA,CAApCG,EAAAA,CAArB,EAAA,CACA,GAAMC,CAAAA,QAAQ,CAAGH,QAAQ,CAAA,GAAA,CAAzB,GAAA,CAEA,MAAOF,CAAAA,IAAI,CAAJA,GAAAA,CAASD,eAAe,CAAxBC,YAAAA,CAAP,QAAOA,CAAP,CAdgD,CAAA,CAgBlDM,gBAAgB,CAhBkC,uBAAA,CAiBlDC,cAAc,CAAEC,WAAW,CAAXA,KAAAA,CAAAA,OAAAA,CAjBkC,MAAA,CAkBlDC,mBAAmB,CAlB+B,SAAA,CAmBlDC,qBAAqB,CAAE,CACrBC,KAAK,CAAEC,WAAW,CAAXA,KAAAA,CADc,WAAA,CAErBC,IAAI,CAAED,WAAW,CAAXA,IAAAA,CAAiBE,WAFF,CAnB2B,CAuBlDC,YAAY,CAAE,CACZJ,KAAK,CADO,oBAAA,CAEZE,IAAI,CAAE,oBAFM,CAvBoC,CA2BlDG,UAAU,CA3BwC,OAAA,CA4BlDC,aAAa,CA5BqC,KAAA,CA6BlDC,kBAAkB,CAAE,OA7B8B,CAApD,CAgCA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAA,YAAA,CAWnB,IANHC,CAAAA,MAMG,2DAXmB,EAWnB,CACH,GAAMC,CAAAA,YAAY,CAAA,aAAA,CAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,CAAlB,MAAkB,CAAlB,CACA,GAAMC,CAAAA,YAAY,CAAGC,YAAY,CAAA,YAAA,CAF9B,YAE8B,CAAjC,CAIA,GAAMC,CAAAA,SAAS,CAAGC,eAAe,CAAA,UAAA,CAAA,YAAA,CAAjC,YAAiC,CAAjC,CACA,MAAA,CAAA,SAAA,CAlBF,CAAA,CAqBA,cAAA,CAAA,eAAA","sourcesContent":["import * as React from 'react';\nimport { Dimensions, Platform, ScrollView, I18nManager } from 'react-native';\nimport {\n  createNavigator,\n  ThemeColors,\n  SafeAreaView,\n  NavigationRouteConfigMap,\n  CreateNavigatorConfig,\n  NavigationRoute,\n} from 'react-navigation';\nimport DrawerRouter from '../routers/DrawerRouter';\nimport DrawerView from '../views/DrawerView';\nimport DrawerItems from '../views/DrawerNavigatorItems';\nimport {\n  NavigationDrawerOptions,\n  NavigationDrawerProp,\n  NavigationDrawerConfig,\n  NavigationDrawerRouterConfig,\n  DrawerContentComponentProps,\n} from '../types';\n\nconst defaultContentComponent = (props: DrawerContentComponentProps) => (\n  <ScrollView alwaysBounceVertical={false}>\n    <SafeAreaView forceInset={{ top: 'always', horizontal: 'never' }}>\n      <DrawerItems {...props} />\n    </SafeAreaView>\n  </ScrollView>\n);\n\nconst DefaultDrawerConfig: NavigationDrawerConfig = {\n  drawerWidth: () => {\n    /*\n     * Default drawer width is screen width - header height\n     * with a max width of 280 on mobile and 320 on tablet\n     * https://material.io/guidelines/patterns/navigation-drawer.html\n     */\n    const { height, width } = Dimensions.get('window');\n    const smallerAxisSize = Math.min(height, width);\n    const isLandscape = width > height;\n    const isTablet = smallerAxisSize >= 600;\n    const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n    const maxWidth = isTablet ? 320 : 280;\n\n    return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n  },\n  contentComponent: defaultContentComponent,\n  drawerPosition: I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode: 'on-drag',\n  drawerBackgroundColor: {\n    light: ThemeColors.light.bodyContent,\n    dark: ThemeColors.dark.bodyContent,\n  },\n  overlayColor: {\n    light: 'rgba(0, 0, 0, 0.5)',\n    dark: 'rgba(0, 0, 0, 0.5)',\n  },\n  drawerType: 'front',\n  hideStatusBar: false,\n  statusBarAnimation: 'slide',\n};\n\nconst DrawerNavigator = (\n  routeConfigs: NavigationRouteConfigMap<\n    NavigationDrawerOptions,\n    NavigationDrawerProp<NavigationRoute, any>\n  >,\n  config: CreateNavigatorConfig<\n    NavigationDrawerConfig,\n    NavigationDrawerRouterConfig,\n    NavigationDrawerOptions,\n    NavigationDrawerProp<NavigationRoute, any>\n  > = {}\n) => {\n  const mergedConfig = { ...DefaultDrawerConfig, ...config };\n  const drawerRouter = DrawerRouter(routeConfigs, mergedConfig);\n\n  // TODO: don't have time to fix it right now\n  // @ts-ignore\n  const navigator = createNavigator(DrawerView, drawerRouter, mergedConfig);\n  return navigator;\n};\n\nexport default DrawerNavigator;\n"]},"metadata":{},"sourceType":"module"}
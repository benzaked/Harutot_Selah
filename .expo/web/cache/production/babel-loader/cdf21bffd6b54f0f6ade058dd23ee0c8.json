{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _inherits from\"@babel/runtime/helpers/inherits\";function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import Dimensions from\"react-native-web/dist/exports/Dimensions\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import{SceneView,ThemeColors,ThemeContext}from'react-navigation';import{ScreenContainer}from'react-native-screens';import*as DrawerActions from\"../routers/DrawerActions\";import DrawerSidebar from\"./DrawerSidebar\";import DrawerGestureContext from\"../utils/DrawerGestureContext\";import ResourceSavingScene from\"./ResourceSavingScene\";import Drawer from\"./Drawer\";var DrawerView=function(_React$PureComponent){_inherits(DrawerView,_React$PureComponent);function DrawerView(){var _getPrototypeOf2;var _this;_classCallCheck(this,DrawerView);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(DrawerView)).call.apply(_getPrototypeOf2,[this].concat(args)));_defineProperty(_assertThisInitialized(_this),\"state\",{loaded:[_this.props.navigation.state.index],drawerWidth:typeof _this.props.navigationConfig.drawerWidth==='function'?_this.props.navigationConfig.drawerWidth():_this.props.navigationConfig.drawerWidth});_defineProperty(_assertThisInitialized(_this),\"context\",void 0);_defineProperty(_assertThisInitialized(_this),\"drawerGestureRef\",React.createRef());_defineProperty(_assertThisInitialized(_this),\"getLockMode\",function(_ref){var navigation=_ref.navigation,descriptors=_ref.descriptors;var activeKey=navigation.state.routes[navigation.state.index].key;var drawerLockMode=descriptors[activeKey].options.drawerLockMode;return drawerLockMode;});_defineProperty(_assertThisInitialized(_this),\"handleDrawerOpen\",function(){var navigation=_this.props.navigation;navigation.dispatch(DrawerActions.openDrawer({key:navigation.state.key}));});_defineProperty(_assertThisInitialized(_this),\"handleDrawerClose\",function(){var navigation=_this.props.navigation;navigation.dispatch(DrawerActions.closeDrawer({key:navigation.state.key}));});_defineProperty(_assertThisInitialized(_this),\"updateWidth\",function(){var drawerWidth=typeof _this.props.navigationConfig.drawerWidth==='function'?_this.props.navigationConfig.drawerWidth():_this.props.navigationConfig.drawerWidth;if(_this.state.drawerWidth!==drawerWidth){_this.setState({drawerWidth:drawerWidth});}});_defineProperty(_assertThisInitialized(_this),\"renderNavigationView\",function(_ref2){var progress=_ref2.progress;return React.createElement(DrawerSidebar,_extends({screenProps:_this.props.screenProps,drawerOpenProgress:progress,navigation:_this.props.navigation,descriptors:_this.props.descriptors,contentComponent:_this.props.navigationConfig.contentComponent,contentOptions:_this.props.navigationConfig.contentOptions,drawerPosition:_this.props.navigationConfig.drawerPosition,style:_this.props.navigationConfig.style},_this.props.navigationConfig));});_defineProperty(_assertThisInitialized(_this),\"renderContent\",function(){var _this$props=_this.props,lazy=_this$props.lazy,navigation=_this$props.navigation;var loaded=_this.state.loaded;var routes=navigation.state.routes;if(_this.props.navigationConfig.unmountInactiveRoutes){var activeKey=navigation.state.routes[navigation.state.index].key;var descriptor=_this.props.descriptors[activeKey];return React.createElement(SceneView,{navigation:descriptor.navigation,screenProps:_this.props.screenProps,component:descriptor.getComponent()});}else{return React.createElement(ScreenContainer,{style:styles.content},routes.map(function(route,index){if(lazy&&!loaded.includes(index)){return null;}var isFocused=navigation.state.index===index;var descriptor=_this.props.descriptors[route.key];return React.createElement(ResourceSavingScene,{key:route.key,style:[StyleSheet.absoluteFill,{opacity:isFocused?1:0}],isVisible:isFocused},React.createElement(SceneView,{navigation:descriptor.navigation,screenProps:_this.props.screenProps,component:descriptor.getComponent()}));}));}});_defineProperty(_assertThisInitialized(_this),\"setDrawerGestureRef\",function(ref){_this.drawerGestureRef.current=ref;});return _this;}_createClass(DrawerView,[{key:\"componentDidMount\",value:function componentDidMount(){if(this.getLockMode(this.props)==='locked-open'){this.handleDrawerOpen();}Dimensions.addEventListener('change',this.updateWidth);}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){var prevLockMode=this.getLockMode(prevProps);var nextLockMode=this.getLockMode(this.props);if(prevLockMode!==nextLockMode){if(nextLockMode==='locked-open'){this.handleDrawerOpen();}else{this.handleDrawerClose();}}}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){Dimensions.removeEventListener('change',this.updateWidth);}},{key:\"getDrawerBackgroundColor\",value:function getDrawerBackgroundColor(){var drawerBackgroundColor=this.props.navigationConfig.drawerBackgroundColor;if(drawerBackgroundColor){return typeof drawerBackgroundColor==='string'?drawerBackgroundColor:drawerBackgroundColor[this.context];}else{return ThemeColors[this.context].bodyContent;}}},{key:\"getOverlayColor\",value:function getOverlayColor(){var overlayColor=this.props.navigationConfig.overlayColor;if(overlayColor){return typeof overlayColor==='string'?overlayColor:overlayColor[this.context];}else{return'rgba(0,0,0,0.5)';}}},{key:\"render\",value:function render(){var _this$props2=this.props,navigation=_this$props2.navigation,navigationConfig=_this$props2.navigationConfig;var drawerType=navigationConfig.drawerType,sceneContainerStyle=navigationConfig.sceneContainerStyle,edgeWidth=navigationConfig.edgeWidth,minSwipeDistance=navigationConfig.minSwipeDistance,hideStatusBar=navigationConfig.hideStatusBar,statusBarAnimation=navigationConfig.statusBarAnimation,gestureHandlerProps=navigationConfig.gestureHandlerProps;var drawerLockMode=this.getLockMode(this.props);var drawerBackgroundColor=this.getDrawerBackgroundColor();var overlayColor=this.getOverlayColor();return React.createElement(DrawerGestureContext.Provider,{value:this.drawerGestureRef},React.createElement(Drawer,{open:navigation.state.isDrawerOpen,gestureEnabled:drawerLockMode!=='locked-open'&&drawerLockMode!=='locked-closed',onOpen:this.handleDrawerOpen,onClose:this.handleDrawerClose,onGestureRef:this.setDrawerGestureRef,gestureHandlerProps:gestureHandlerProps,drawerType:drawerType,drawerPosition:this.props.navigationConfig.drawerPosition,sceneContainerStyle:sceneContainerStyle,drawerStyle:{backgroundColor:drawerBackgroundColor,width:this.state.drawerWidth},overlayStyle:{backgroundColor:overlayColor},swipeEdgeWidth:edgeWidth,swipeDistanceThreshold:minSwipeDistance,hideStatusBar:hideStatusBar,statusBarAnimation:statusBarAnimation,renderDrawerContent:this.renderNavigationView,renderSceneContent:this.renderContent}));}}],[{key:\"getDerivedStateFromProps\",value:function getDerivedStateFromProps(nextProps,prevState){var index=nextProps.navigation.state.index;return{loaded:prevState.loaded.includes(index)?prevState.loaded:[].concat(_toConsumableArray(prevState.loaded),[index])};}}]);return DrawerView;}(React.PureComponent);export{DrawerView as default};_defineProperty(DrawerView,\"contextType\",ThemeContext);_defineProperty(DrawerView,\"defaultProps\",{lazy:true});var styles=StyleSheet.create({content:{flex:1}});","map":{"version":3,"sources":["DrawerView.tsx"],"names":["DrawerView","React","ThemeContext","lazy","index","nextProps","loaded","prevState","drawerWidth","Dimensions","prevLockMode","nextLockMode","descriptors","activeKey","navigation","drawerLockMode","key","progress","style","routes","descriptor","styles","content","isFocused","route","StyleSheet","opacity","ref","drawerBackgroundColor","ThemeColors","overlayColor","navigationConfig","gestureHandlerProps","drawerGestureRef","backgroundColor","width","renderContent","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Dimensions, StyleSheet, ViewStyle } from 'react-native';\nimport {\n  SceneView,\n  ThemeColors,\n  ThemeContext,\n  NavigationScreenProp,\n} from 'react-navigation';\nimport { ScreenContainer } from 'react-native-screens';\n\nimport * as DrawerActions from '../routers/DrawerActions';\nimport DrawerSidebar from './DrawerSidebar';\nimport DrawerGestureContext from '../utils/DrawerGestureContext';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport Drawer from './Drawer';\nimport {\n  NavigationDrawerState,\n  DrawerContentComponentProps,\n  SceneDescriptorMap,\n} from '../types';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\n\ntype DrawerOptions = {\n  drawerBackgroundColor?: string;\n  overlayColor?: string;\n  minSwipeDistance?: number;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide';\n  drawerLockMode?: 'unlocked' | 'locked-closed' | 'locked-open';\n  keyboardDismissMode?: 'on-drag' | 'none';\n  drawerWidth: number | (() => number);\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  onDrawerClose?: () => void;\n  onDrawerOpen?: () => void;\n  sceneContainerStyle?: ViewStyle;\n  edgeWidth: number;\n  hideStatusBar?: boolean;\n  style?: ViewStyle;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n};\n\ntype Props = {\n  lazy: boolean;\n  navigation: NavigationScreenProp<NavigationDrawerState>;\n  descriptors: SceneDescriptorMap;\n  navigationConfig: DrawerOptions & {\n    contentComponent?: React.ComponentType<DrawerContentComponentProps>;\n    unmountInactiveRoutes?: boolean;\n    contentOptions?: object;\n  };\n  screenProps: unknown;\n};\n\ntype State = {\n  loaded: number[];\n  drawerWidth: number;\n};\n\n/**\n * Component that renders the drawer.\n */\nexport default class DrawerView extends React.PureComponent<Props, State> {\n  // eslint-disable-next-line react/sort-comp\n  static contextType = ThemeContext;\n  static defaultProps = {\n    lazy: true,\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index)\n        ? prevState.loaded\n        : [...prevState.loaded, index],\n    };\n  }\n\n  state: State = {\n    loaded: [this.props.navigation.state.index],\n    drawerWidth:\n      typeof this.props.navigationConfig.drawerWidth === 'function'\n        ? this.props.navigationConfig.drawerWidth()\n        : this.props.navigationConfig.drawerWidth,\n  };\n\n  componentDidMount() {\n    // If drawerLockMode was set to `locked-open`, we should open the drawer on mount\n    if (this.getLockMode(this.props) === 'locked-open') {\n      this.handleDrawerOpen();\n    }\n\n    Dimensions.addEventListener('change', this.updateWidth);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const prevLockMode = this.getLockMode(prevProps);\n    const nextLockMode = this.getLockMode(this.props);\n\n    if (prevLockMode !== nextLockMode) {\n      if (nextLockMode === 'locked-open') {\n        this.handleDrawerOpen();\n      } else {\n        this.handleDrawerClose();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this.updateWidth);\n  }\n\n  context!: React.ContextType<typeof ThemeContext>;\n\n  private drawerGestureRef = React.createRef<PanGestureHandler>();\n\n  private getLockMode = ({ navigation, descriptors }: Props) => {\n    const activeKey = navigation.state.routes[navigation.state.index].key;\n    const { drawerLockMode } = descriptors[activeKey].options;\n\n    return drawerLockMode;\n  };\n\n  private handleDrawerOpen = () => {\n    const { navigation } = this.props;\n\n    navigation.dispatch(\n      DrawerActions.openDrawer({\n        key: navigation.state.key,\n      })\n    );\n  };\n\n  private handleDrawerClose = () => {\n    const { navigation } = this.props;\n\n    navigation.dispatch(\n      DrawerActions.closeDrawer({\n        key: navigation.state.key,\n      })\n    );\n  };\n\n  private updateWidth = () => {\n    const drawerWidth =\n      typeof this.props.navigationConfig.drawerWidth === 'function'\n        ? this.props.navigationConfig.drawerWidth()\n        : this.props.navigationConfig.drawerWidth;\n\n    if (this.state.drawerWidth !== drawerWidth) {\n      this.setState({ drawerWidth });\n    }\n  };\n\n  private renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerSidebar\n        screenProps={this.props.screenProps}\n        drawerOpenProgress={progress}\n        navigation={this.props.navigation}\n        descriptors={this.props.descriptors}\n        contentComponent={this.props.navigationConfig.contentComponent}\n        contentOptions={this.props.navigationConfig.contentOptions}\n        drawerPosition={this.props.navigationConfig.drawerPosition}\n        style={this.props.navigationConfig.style}\n        {...this.props.navigationConfig}\n      />\n    );\n  };\n\n  private renderContent = () => {\n    let { lazy, navigation } = this.props;\n    let { loaded } = this.state;\n    let { routes } = navigation.state;\n\n    if (this.props.navigationConfig.unmountInactiveRoutes) {\n      let activeKey = navigation.state.routes[navigation.state.index].key;\n      let descriptor = this.props.descriptors[activeKey];\n\n      return (\n        <SceneView\n          navigation={descriptor.navigation}\n          screenProps={this.props.screenProps}\n          component={descriptor.getComponent()}\n        />\n      );\n    } else {\n      return (\n        <ScreenContainer style={styles.content}>\n          {routes.map((route, index) => {\n            if (lazy && !loaded.includes(index)) {\n              // Don't render a screen if we've never navigated to it\n              return null;\n            }\n\n            let isFocused = navigation.state.index === index;\n            let descriptor = this.props.descriptors[route.key];\n\n            return (\n              <ResourceSavingScene\n                key={route.key}\n                style={[\n                  StyleSheet.absoluteFill,\n                  { opacity: isFocused ? 1 : 0 },\n                ]}\n                isVisible={isFocused}\n              >\n                <SceneView\n                  navigation={descriptor.navigation}\n                  screenProps={this.props.screenProps}\n                  component={descriptor.getComponent()}\n                />\n              </ResourceSavingScene>\n            );\n          })}\n        </ScreenContainer>\n      );\n    }\n  };\n\n  private setDrawerGestureRef = (ref: PanGestureHandler | null) => {\n    // @ts-ignore\n    this.drawerGestureRef.current = ref;\n  };\n\n  private getDrawerBackgroundColor() {\n    const { drawerBackgroundColor } = this.props.navigationConfig;\n\n    if (drawerBackgroundColor) {\n      return typeof drawerBackgroundColor === 'string'\n        ? drawerBackgroundColor\n        : drawerBackgroundColor[this.context];\n    } else {\n      return ThemeColors[this.context].bodyContent;\n    }\n  }\n\n  private getOverlayColor() {\n    const { overlayColor } = this.props.navigationConfig;\n\n    if (overlayColor) {\n      return typeof overlayColor === 'string'\n        ? overlayColor\n        : overlayColor[this.context];\n    } else {\n      return 'rgba(0,0,0,0.5)';\n    }\n  }\n\n  render() {\n    const { navigation, navigationConfig } = this.props;\n    const {\n      drawerType,\n      sceneContainerStyle,\n      edgeWidth,\n      minSwipeDistance,\n      hideStatusBar,\n      statusBarAnimation,\n      gestureHandlerProps,\n    } = navigationConfig;\n\n    const drawerLockMode = this.getLockMode(this.props);\n    const drawerBackgroundColor = this.getDrawerBackgroundColor();\n    const overlayColor = this.getOverlayColor();\n\n    return (\n      <DrawerGestureContext.Provider value={this.drawerGestureRef}>\n        <Drawer\n          open={navigation.state.isDrawerOpen}\n          gestureEnabled={\n            drawerLockMode !== 'locked-open' &&\n            drawerLockMode !== 'locked-closed'\n          }\n          onOpen={this.handleDrawerOpen}\n          onClose={this.handleDrawerClose}\n          onGestureRef={this.setDrawerGestureRef}\n          gestureHandlerProps={gestureHandlerProps}\n          drawerType={drawerType}\n          drawerPosition={this.props.navigationConfig.drawerPosition}\n          sceneContainerStyle={sceneContainerStyle}\n          drawerStyle={{\n            backgroundColor: drawerBackgroundColor,\n            width: this.state.drawerWidth,\n          }}\n          overlayStyle={{ backgroundColor: overlayColor }}\n          swipeEdgeWidth={edgeWidth}\n          swipeDistanceThreshold={minSwipeDistance}\n          hideStatusBar={hideStatusBar}\n          statusBarAnimation={statusBarAnimation}\n          renderDrawerContent={this.renderNavigationView}\n          renderSceneContent={this.renderContent}\n        />\n      </DrawerGestureContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}